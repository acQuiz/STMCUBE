
servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003738  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800392c  0800392c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003934  08003934  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003934  08003934  00013934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003938  08003938  00013938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800393c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000001b4  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000be6c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000204e  00000000  00000000  0002bf3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009e0  00000000  00000000  0002df90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000076e  00000000  00000000  0002e970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000262ee  00000000  00000000  0002f0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bedf  00000000  00000000  000553cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000daa2c  00000000  00000000  000612ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f20  00000000  00000000  0013bcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0013ebf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080038d0 	.word	0x080038d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	080038d0 	.word	0x080038d0

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_ddiv>:
 8000444:	b570      	push	{r4, r5, r6, lr}
 8000446:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800044a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800044e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000452:	bf1d      	ittte	ne
 8000454:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000458:	ea94 0f0c 	teqne	r4, ip
 800045c:	ea95 0f0c 	teqne	r5, ip
 8000460:	f000 f8a7 	bleq	80005b2 <__aeabi_ddiv+0x16e>
 8000464:	eba4 0405 	sub.w	r4, r4, r5
 8000468:	ea81 0e03 	eor.w	lr, r1, r3
 800046c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000470:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000474:	f000 8088 	beq.w	8000588 <__aeabi_ddiv+0x144>
 8000478:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800047c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000480:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000484:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000488:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800048c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000490:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000494:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000498:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800049c:	429d      	cmp	r5, r3
 800049e:	bf08      	it	eq
 80004a0:	4296      	cmpeq	r6, r2
 80004a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80004a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80004aa:	d202      	bcs.n	80004b2 <__aeabi_ddiv+0x6e>
 80004ac:	085b      	lsrs	r3, r3, #1
 80004ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80004b2:	1ab6      	subs	r6, r6, r2
 80004b4:	eb65 0503 	sbc.w	r5, r5, r3
 80004b8:	085b      	lsrs	r3, r3, #1
 80004ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80004be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80004c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80004c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80004ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004ce:	bf22      	ittt	cs
 80004d0:	1ab6      	subcs	r6, r6, r2
 80004d2:	4675      	movcs	r5, lr
 80004d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80004d8:	085b      	lsrs	r3, r3, #1
 80004da:	ea4f 0232 	mov.w	r2, r2, rrx
 80004de:	ebb6 0e02 	subs.w	lr, r6, r2
 80004e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004e6:	bf22      	ittt	cs
 80004e8:	1ab6      	subcs	r6, r6, r2
 80004ea:	4675      	movcs	r5, lr
 80004ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80004f0:	085b      	lsrs	r3, r3, #1
 80004f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80004f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80004fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004fe:	bf22      	ittt	cs
 8000500:	1ab6      	subcs	r6, r6, r2
 8000502:	4675      	movcs	r5, lr
 8000504:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000508:	085b      	lsrs	r3, r3, #1
 800050a:	ea4f 0232 	mov.w	r2, r2, rrx
 800050e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000512:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000516:	bf22      	ittt	cs
 8000518:	1ab6      	subcs	r6, r6, r2
 800051a:	4675      	movcs	r5, lr
 800051c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000520:	ea55 0e06 	orrs.w	lr, r5, r6
 8000524:	d018      	beq.n	8000558 <__aeabi_ddiv+0x114>
 8000526:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800052a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800052e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000532:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000536:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800053a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800053e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000542:	d1c0      	bne.n	80004c6 <__aeabi_ddiv+0x82>
 8000544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000548:	d10b      	bne.n	8000562 <__aeabi_ddiv+0x11e>
 800054a:	ea41 0100 	orr.w	r1, r1, r0
 800054e:	f04f 0000 	mov.w	r0, #0
 8000552:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000556:	e7b6      	b.n	80004c6 <__aeabi_ddiv+0x82>
 8000558:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800055c:	bf04      	itt	eq
 800055e:	4301      	orreq	r1, r0
 8000560:	2000      	moveq	r0, #0
 8000562:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000566:	bf88      	it	hi
 8000568:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056c:	f63f aeaf 	bhi.w	80002ce <__aeabi_dmul+0xde>
 8000570:	ebb5 0c03 	subs.w	ip, r5, r3
 8000574:	bf04      	itt	eq
 8000576:	ebb6 0c02 	subseq.w	ip, r6, r2
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800058c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000590:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000594:	bfc2      	ittt	gt
 8000596:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059e:	bd70      	popgt	{r4, r5, r6, pc}
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f04f 0e00 	mov.w	lr, #0
 80005a8:	3c01      	subs	r4, #1
 80005aa:	e690      	b.n	80002ce <__aeabi_dmul+0xde>
 80005ac:	ea45 0e06 	orr.w	lr, r5, r6
 80005b0:	e68d      	b.n	80002ce <__aeabi_dmul+0xde>
 80005b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80005b6:	ea94 0f0c 	teq	r4, ip
 80005ba:	bf08      	it	eq
 80005bc:	ea95 0f0c 	teqeq	r5, ip
 80005c0:	f43f af3b 	beq.w	800043a <__aeabi_dmul+0x24a>
 80005c4:	ea94 0f0c 	teq	r4, ip
 80005c8:	d10a      	bne.n	80005e0 <__aeabi_ddiv+0x19c>
 80005ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005ce:	f47f af34 	bne.w	800043a <__aeabi_dmul+0x24a>
 80005d2:	ea95 0f0c 	teq	r5, ip
 80005d6:	f47f af25 	bne.w	8000424 <__aeabi_dmul+0x234>
 80005da:	4610      	mov	r0, r2
 80005dc:	4619      	mov	r1, r3
 80005de:	e72c      	b.n	800043a <__aeabi_dmul+0x24a>
 80005e0:	ea95 0f0c 	teq	r5, ip
 80005e4:	d106      	bne.n	80005f4 <__aeabi_ddiv+0x1b0>
 80005e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80005ea:	f43f aefd 	beq.w	80003e8 <__aeabi_dmul+0x1f8>
 80005ee:	4610      	mov	r0, r2
 80005f0:	4619      	mov	r1, r3
 80005f2:	e722      	b.n	800043a <__aeabi_dmul+0x24a>
 80005f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80005f8:	bf18      	it	ne
 80005fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80005fe:	f47f aec5 	bne.w	800038c <__aeabi_dmul+0x19c>
 8000602:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000606:	f47f af0d 	bne.w	8000424 <__aeabi_dmul+0x234>
 800060a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800060e:	f47f aeeb 	bne.w	80003e8 <__aeabi_dmul+0x1f8>
 8000612:	e712      	b.n	800043a <__aeabi_dmul+0x24a>

08000614 <__aeabi_d2uiz>:
 8000614:	004a      	lsls	r2, r1, #1
 8000616:	d211      	bcs.n	800063c <__aeabi_d2uiz+0x28>
 8000618:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800061c:	d211      	bcs.n	8000642 <__aeabi_d2uiz+0x2e>
 800061e:	d50d      	bpl.n	800063c <__aeabi_d2uiz+0x28>
 8000620:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000624:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000628:	d40e      	bmi.n	8000648 <__aeabi_d2uiz+0x34>
 800062a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000632:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	4770      	bx	lr
 800063c:	f04f 0000 	mov.w	r0, #0
 8000640:	4770      	bx	lr
 8000642:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000646:	d102      	bne.n	800064e <__aeabi_d2uiz+0x3a>
 8000648:	f04f 30ff 	mov.w	r0, #4294967295
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <__aeabi_uldivmod>:
 8000654:	b953      	cbnz	r3, 800066c <__aeabi_uldivmod+0x18>
 8000656:	b94a      	cbnz	r2, 800066c <__aeabi_uldivmod+0x18>
 8000658:	2900      	cmp	r1, #0
 800065a:	bf08      	it	eq
 800065c:	2800      	cmpeq	r0, #0
 800065e:	bf1c      	itt	ne
 8000660:	f04f 31ff 	movne.w	r1, #4294967295
 8000664:	f04f 30ff 	movne.w	r0, #4294967295
 8000668:	f000 b970 	b.w	800094c <__aeabi_idiv0>
 800066c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000670:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000674:	f000 f806 	bl	8000684 <__udivmoddi4>
 8000678:	f8dd e004 	ldr.w	lr, [sp, #4]
 800067c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000680:	b004      	add	sp, #16
 8000682:	4770      	bx	lr

08000684 <__udivmoddi4>:
 8000684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000688:	9e08      	ldr	r6, [sp, #32]
 800068a:	460d      	mov	r5, r1
 800068c:	4604      	mov	r4, r0
 800068e:	460f      	mov	r7, r1
 8000690:	2b00      	cmp	r3, #0
 8000692:	d14a      	bne.n	800072a <__udivmoddi4+0xa6>
 8000694:	428a      	cmp	r2, r1
 8000696:	4694      	mov	ip, r2
 8000698:	d965      	bls.n	8000766 <__udivmoddi4+0xe2>
 800069a:	fab2 f382 	clz	r3, r2
 800069e:	b143      	cbz	r3, 80006b2 <__udivmoddi4+0x2e>
 80006a0:	fa02 fc03 	lsl.w	ip, r2, r3
 80006a4:	f1c3 0220 	rsb	r2, r3, #32
 80006a8:	409f      	lsls	r7, r3
 80006aa:	fa20 f202 	lsr.w	r2, r0, r2
 80006ae:	4317      	orrs	r7, r2
 80006b0:	409c      	lsls	r4, r3
 80006b2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006b6:	fa1f f58c 	uxth.w	r5, ip
 80006ba:	fbb7 f1fe 	udiv	r1, r7, lr
 80006be:	0c22      	lsrs	r2, r4, #16
 80006c0:	fb0e 7711 	mls	r7, lr, r1, r7
 80006c4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006c8:	fb01 f005 	mul.w	r0, r1, r5
 80006cc:	4290      	cmp	r0, r2
 80006ce:	d90a      	bls.n	80006e6 <__udivmoddi4+0x62>
 80006d0:	eb1c 0202 	adds.w	r2, ip, r2
 80006d4:	f101 37ff 	add.w	r7, r1, #4294967295
 80006d8:	f080 811c 	bcs.w	8000914 <__udivmoddi4+0x290>
 80006dc:	4290      	cmp	r0, r2
 80006de:	f240 8119 	bls.w	8000914 <__udivmoddi4+0x290>
 80006e2:	3902      	subs	r1, #2
 80006e4:	4462      	add	r2, ip
 80006e6:	1a12      	subs	r2, r2, r0
 80006e8:	b2a4      	uxth	r4, r4
 80006ea:	fbb2 f0fe 	udiv	r0, r2, lr
 80006ee:	fb0e 2210 	mls	r2, lr, r0, r2
 80006f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006f6:	fb00 f505 	mul.w	r5, r0, r5
 80006fa:	42a5      	cmp	r5, r4
 80006fc:	d90a      	bls.n	8000714 <__udivmoddi4+0x90>
 80006fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000702:	f100 32ff 	add.w	r2, r0, #4294967295
 8000706:	f080 8107 	bcs.w	8000918 <__udivmoddi4+0x294>
 800070a:	42a5      	cmp	r5, r4
 800070c:	f240 8104 	bls.w	8000918 <__udivmoddi4+0x294>
 8000710:	4464      	add	r4, ip
 8000712:	3802      	subs	r0, #2
 8000714:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000718:	1b64      	subs	r4, r4, r5
 800071a:	2100      	movs	r1, #0
 800071c:	b11e      	cbz	r6, 8000726 <__udivmoddi4+0xa2>
 800071e:	40dc      	lsrs	r4, r3
 8000720:	2300      	movs	r3, #0
 8000722:	e9c6 4300 	strd	r4, r3, [r6]
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	428b      	cmp	r3, r1
 800072c:	d908      	bls.n	8000740 <__udivmoddi4+0xbc>
 800072e:	2e00      	cmp	r6, #0
 8000730:	f000 80ed 	beq.w	800090e <__udivmoddi4+0x28a>
 8000734:	2100      	movs	r1, #0
 8000736:	e9c6 0500 	strd	r0, r5, [r6]
 800073a:	4608      	mov	r0, r1
 800073c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000740:	fab3 f183 	clz	r1, r3
 8000744:	2900      	cmp	r1, #0
 8000746:	d149      	bne.n	80007dc <__udivmoddi4+0x158>
 8000748:	42ab      	cmp	r3, r5
 800074a:	d302      	bcc.n	8000752 <__udivmoddi4+0xce>
 800074c:	4282      	cmp	r2, r0
 800074e:	f200 80f8 	bhi.w	8000942 <__udivmoddi4+0x2be>
 8000752:	1a84      	subs	r4, r0, r2
 8000754:	eb65 0203 	sbc.w	r2, r5, r3
 8000758:	2001      	movs	r0, #1
 800075a:	4617      	mov	r7, r2
 800075c:	2e00      	cmp	r6, #0
 800075e:	d0e2      	beq.n	8000726 <__udivmoddi4+0xa2>
 8000760:	e9c6 4700 	strd	r4, r7, [r6]
 8000764:	e7df      	b.n	8000726 <__udivmoddi4+0xa2>
 8000766:	b902      	cbnz	r2, 800076a <__udivmoddi4+0xe6>
 8000768:	deff      	udf	#255	; 0xff
 800076a:	fab2 f382 	clz	r3, r2
 800076e:	2b00      	cmp	r3, #0
 8000770:	f040 8090 	bne.w	8000894 <__udivmoddi4+0x210>
 8000774:	1a8a      	subs	r2, r1, r2
 8000776:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800077a:	fa1f fe8c 	uxth.w	lr, ip
 800077e:	2101      	movs	r1, #1
 8000780:	fbb2 f5f7 	udiv	r5, r2, r7
 8000784:	fb07 2015 	mls	r0, r7, r5, r2
 8000788:	0c22      	lsrs	r2, r4, #16
 800078a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800078e:	fb0e f005 	mul.w	r0, lr, r5
 8000792:	4290      	cmp	r0, r2
 8000794:	d908      	bls.n	80007a8 <__udivmoddi4+0x124>
 8000796:	eb1c 0202 	adds.w	r2, ip, r2
 800079a:	f105 38ff 	add.w	r8, r5, #4294967295
 800079e:	d202      	bcs.n	80007a6 <__udivmoddi4+0x122>
 80007a0:	4290      	cmp	r0, r2
 80007a2:	f200 80cb 	bhi.w	800093c <__udivmoddi4+0x2b8>
 80007a6:	4645      	mov	r5, r8
 80007a8:	1a12      	subs	r2, r2, r0
 80007aa:	b2a4      	uxth	r4, r4
 80007ac:	fbb2 f0f7 	udiv	r0, r2, r7
 80007b0:	fb07 2210 	mls	r2, r7, r0, r2
 80007b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007b8:	fb0e fe00 	mul.w	lr, lr, r0
 80007bc:	45a6      	cmp	lr, r4
 80007be:	d908      	bls.n	80007d2 <__udivmoddi4+0x14e>
 80007c0:	eb1c 0404 	adds.w	r4, ip, r4
 80007c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007c8:	d202      	bcs.n	80007d0 <__udivmoddi4+0x14c>
 80007ca:	45a6      	cmp	lr, r4
 80007cc:	f200 80bb 	bhi.w	8000946 <__udivmoddi4+0x2c2>
 80007d0:	4610      	mov	r0, r2
 80007d2:	eba4 040e 	sub.w	r4, r4, lr
 80007d6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007da:	e79f      	b.n	800071c <__udivmoddi4+0x98>
 80007dc:	f1c1 0720 	rsb	r7, r1, #32
 80007e0:	408b      	lsls	r3, r1
 80007e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80007e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80007ea:	fa05 f401 	lsl.w	r4, r5, r1
 80007ee:	fa20 f307 	lsr.w	r3, r0, r7
 80007f2:	40fd      	lsrs	r5, r7
 80007f4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007f8:	4323      	orrs	r3, r4
 80007fa:	fbb5 f8f9 	udiv	r8, r5, r9
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	fb09 5518 	mls	r5, r9, r8, r5
 8000806:	0c1c      	lsrs	r4, r3, #16
 8000808:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800080c:	fb08 f50e 	mul.w	r5, r8, lr
 8000810:	42a5      	cmp	r5, r4
 8000812:	fa02 f201 	lsl.w	r2, r2, r1
 8000816:	fa00 f001 	lsl.w	r0, r0, r1
 800081a:	d90b      	bls.n	8000834 <__udivmoddi4+0x1b0>
 800081c:	eb1c 0404 	adds.w	r4, ip, r4
 8000820:	f108 3aff 	add.w	sl, r8, #4294967295
 8000824:	f080 8088 	bcs.w	8000938 <__udivmoddi4+0x2b4>
 8000828:	42a5      	cmp	r5, r4
 800082a:	f240 8085 	bls.w	8000938 <__udivmoddi4+0x2b4>
 800082e:	f1a8 0802 	sub.w	r8, r8, #2
 8000832:	4464      	add	r4, ip
 8000834:	1b64      	subs	r4, r4, r5
 8000836:	b29d      	uxth	r5, r3
 8000838:	fbb4 f3f9 	udiv	r3, r4, r9
 800083c:	fb09 4413 	mls	r4, r9, r3, r4
 8000840:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000844:	fb03 fe0e 	mul.w	lr, r3, lr
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x1da>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f103 35ff 	add.w	r5, r3, #4294967295
 8000854:	d26c      	bcs.n	8000930 <__udivmoddi4+0x2ac>
 8000856:	45a6      	cmp	lr, r4
 8000858:	d96a      	bls.n	8000930 <__udivmoddi4+0x2ac>
 800085a:	3b02      	subs	r3, #2
 800085c:	4464      	add	r4, ip
 800085e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000862:	fba3 9502 	umull	r9, r5, r3, r2
 8000866:	eba4 040e 	sub.w	r4, r4, lr
 800086a:	42ac      	cmp	r4, r5
 800086c:	46c8      	mov	r8, r9
 800086e:	46ae      	mov	lr, r5
 8000870:	d356      	bcc.n	8000920 <__udivmoddi4+0x29c>
 8000872:	d053      	beq.n	800091c <__udivmoddi4+0x298>
 8000874:	b156      	cbz	r6, 800088c <__udivmoddi4+0x208>
 8000876:	ebb0 0208 	subs.w	r2, r0, r8
 800087a:	eb64 040e 	sbc.w	r4, r4, lr
 800087e:	fa04 f707 	lsl.w	r7, r4, r7
 8000882:	40ca      	lsrs	r2, r1
 8000884:	40cc      	lsrs	r4, r1
 8000886:	4317      	orrs	r7, r2
 8000888:	e9c6 7400 	strd	r7, r4, [r6]
 800088c:	4618      	mov	r0, r3
 800088e:	2100      	movs	r1, #0
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	f1c3 0120 	rsb	r1, r3, #32
 8000898:	fa02 fc03 	lsl.w	ip, r2, r3
 800089c:	fa20 f201 	lsr.w	r2, r0, r1
 80008a0:	fa25 f101 	lsr.w	r1, r5, r1
 80008a4:	409d      	lsls	r5, r3
 80008a6:	432a      	orrs	r2, r5
 80008a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ac:	fa1f fe8c 	uxth.w	lr, ip
 80008b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80008b4:	fb07 1510 	mls	r5, r7, r0, r1
 80008b8:	0c11      	lsrs	r1, r2, #16
 80008ba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008be:	fb00 f50e 	mul.w	r5, r0, lr
 80008c2:	428d      	cmp	r5, r1
 80008c4:	fa04 f403 	lsl.w	r4, r4, r3
 80008c8:	d908      	bls.n	80008dc <__udivmoddi4+0x258>
 80008ca:	eb1c 0101 	adds.w	r1, ip, r1
 80008ce:	f100 38ff 	add.w	r8, r0, #4294967295
 80008d2:	d22f      	bcs.n	8000934 <__udivmoddi4+0x2b0>
 80008d4:	428d      	cmp	r5, r1
 80008d6:	d92d      	bls.n	8000934 <__udivmoddi4+0x2b0>
 80008d8:	3802      	subs	r0, #2
 80008da:	4461      	add	r1, ip
 80008dc:	1b49      	subs	r1, r1, r5
 80008de:	b292      	uxth	r2, r2
 80008e0:	fbb1 f5f7 	udiv	r5, r1, r7
 80008e4:	fb07 1115 	mls	r1, r7, r5, r1
 80008e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008ec:	fb05 f10e 	mul.w	r1, r5, lr
 80008f0:	4291      	cmp	r1, r2
 80008f2:	d908      	bls.n	8000906 <__udivmoddi4+0x282>
 80008f4:	eb1c 0202 	adds.w	r2, ip, r2
 80008f8:	f105 38ff 	add.w	r8, r5, #4294967295
 80008fc:	d216      	bcs.n	800092c <__udivmoddi4+0x2a8>
 80008fe:	4291      	cmp	r1, r2
 8000900:	d914      	bls.n	800092c <__udivmoddi4+0x2a8>
 8000902:	3d02      	subs	r5, #2
 8000904:	4462      	add	r2, ip
 8000906:	1a52      	subs	r2, r2, r1
 8000908:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800090c:	e738      	b.n	8000780 <__udivmoddi4+0xfc>
 800090e:	4631      	mov	r1, r6
 8000910:	4630      	mov	r0, r6
 8000912:	e708      	b.n	8000726 <__udivmoddi4+0xa2>
 8000914:	4639      	mov	r1, r7
 8000916:	e6e6      	b.n	80006e6 <__udivmoddi4+0x62>
 8000918:	4610      	mov	r0, r2
 800091a:	e6fb      	b.n	8000714 <__udivmoddi4+0x90>
 800091c:	4548      	cmp	r0, r9
 800091e:	d2a9      	bcs.n	8000874 <__udivmoddi4+0x1f0>
 8000920:	ebb9 0802 	subs.w	r8, r9, r2
 8000924:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000928:	3b01      	subs	r3, #1
 800092a:	e7a3      	b.n	8000874 <__udivmoddi4+0x1f0>
 800092c:	4645      	mov	r5, r8
 800092e:	e7ea      	b.n	8000906 <__udivmoddi4+0x282>
 8000930:	462b      	mov	r3, r5
 8000932:	e794      	b.n	800085e <__udivmoddi4+0x1da>
 8000934:	4640      	mov	r0, r8
 8000936:	e7d1      	b.n	80008dc <__udivmoddi4+0x258>
 8000938:	46d0      	mov	r8, sl
 800093a:	e77b      	b.n	8000834 <__udivmoddi4+0x1b0>
 800093c:	3d02      	subs	r5, #2
 800093e:	4462      	add	r2, ip
 8000940:	e732      	b.n	80007a8 <__udivmoddi4+0x124>
 8000942:	4608      	mov	r0, r1
 8000944:	e70a      	b.n	800075c <__udivmoddi4+0xd8>
 8000946:	4464      	add	r4, ip
 8000948:	3802      	subs	r0, #2
 800094a:	e742      	b.n	80007d2 <__udivmoddi4+0x14e>

0800094c <__aeabi_idiv0>:
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <_Z18mcu_uart5_transmitPKhh>:
 *  Created on: Nov 30, 2023
 *      Author: adamc
 */
#include "MCU.h"

void mcu_uart5_transmit(const uint8_t* const frame, uint8_t length){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
	HAL_HalfDuplex_EnableTransmitter( &huart5 );
 800095c:	4806      	ldr	r0, [pc, #24]	; (8000978 <_Z18mcu_uart5_transmitPKhh+0x28>)
 800095e:	f002 faca 	bl	8002ef6 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart5, frame, length, 2);
 8000962:	78fb      	ldrb	r3, [r7, #3]
 8000964:	b29a      	uxth	r2, r3
 8000966:	2302      	movs	r3, #2
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <_Z18mcu_uart5_transmitPKhh+0x28>)
 800096c:	f002 fa31 	bl	8002dd2 <HAL_UART_Transmit>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000078 	.word	0x20000078

0800097c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <_ZN5ServoC1Eh>:
 *      Author: adamc
 */

#include "Servo.h"

Servo::Servo(const uint8_t _id) : id(_id){
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <_ZN5ServoC1Eh+0x28>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	78fa      	ldrb	r2, [r7, #3]
 80009aa:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub
}
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	0800390c 	.word	0x0800390c

080009c0 <_ZN5ServoD1Ev>:

Servo::~Servo() {
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <_ZN5ServoD1Ev+0x1c>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	0800390c 	.word	0x0800390c

080009e0 <_ZN5ServoD0Ev>:
Servo::~Servo() {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
}
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ffe9 	bl	80009c0 <_ZN5ServoD1Ev>
 80009ee:	2108      	movs	r1, #8
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f002 fd97 	bl	8003524 <_ZdlPvj>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f000 f9dc 	bl	8000dc6 <_ZNSaIhED1Ev>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f9bf 	bl	8000da6 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ffeb 	bl	8000a18 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <_ZN5Servo12set_positionEddd>:

void Servo::set_position(double _cmd_pos_degree, double _vel, double _acc )
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	61f8      	str	r0, [r7, #28]
 8000a54:	ed87 0b04 	vstr	d0, [r7, #16]
 8000a58:	ed87 1b02 	vstr	d1, [r7, #8]
 8000a5c:	ed87 2b00 	vstr	d2, [r7]
	Frame frame;
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ffe4 	bl	8000a32 <_ZNSt6vectorIhSaIhEEC1Ev>
//    frame[1] = SERVO_FRAME_HEADER;
//    frame[2] = id;
//    frame[3] = 0x0a; // packet len
//    frame[4] = SERVO_FRAME_WRITE; // instruction
//    frame[5] = 0x29; // reg address
    frame.push_back( 254 ); // acceleration
 8000a6a:	23fe      	movs	r3, #254	; 0xfe
 8000a6c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8000a70:	f107 0231 	add.w	r2, r7, #49	; 0x31
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f9e2 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
    frame.push_back( degrees_to_raw(_cmd_pos_degree) );
 8000a80:	ed97 0b04 	vldr	d0, [r7, #16]
 8000a84:	69f8      	ldr	r0, [r7, #28]
 8000a86:	f000 f887 	bl	8000b98 <_ZN5Servo14degrees_to_rawEd>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000a92:	f107 0232 	add.w	r2, r7, #50	; 0x32
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f9d1 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
    frame.push_back( degrees_to_raw(_cmd_pos_degree) >> 8 );
 8000aa2:	ed97 0b04 	vldr	d0, [r7, #16]
 8000aa6:	69f8      	ldr	r0, [r7, #28]
 8000aa8:	f000 f876 	bl	8000b98 <_ZN5Servo14degrees_to_rawEd>
 8000aac:	4603      	mov	r3, r0
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000ab8:	f107 0233 	add.w	r2, r7, #51	; 0x33
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f9be 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
    frame.push_back( 0x00 );
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000ace:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f9b3 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
    frame.push_back( 0x00 );
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000ae4:	f107 0235 	add.w	r2, r7, #53	; 0x35
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f9a8 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
    frame.push_back( (uint8_t)8000 );
 8000af4:	2340      	movs	r3, #64	; 0x40
 8000af6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000afa:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f99d 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
    frame.push_back( 8000 >> 8 );
 8000b0a:	231f      	movs	r3, #31
 8000b0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000b10:	f107 0237 	add.w	r2, r7, #55	; 0x37
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f992 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
    set_memory( frame, ServoMemoryAddress::acceleration );
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	2229      	movs	r2, #41	; 0x29
 8000b26:	4619      	mov	r1, r3
 8000b28:	69f8      	ldr	r0, [r7, #28]
 8000b2a:	f000 f899 	bl	8000c60 <_ZN5Servo10set_memoryERKSt6vectorIhSaIhEENS_18ServoMemoryAddressE>
//    frame.push_back( calculate_checksum(14, frame) );
//
//    mcu_uart5_transmit(frame, 14);
}
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f96b 	bl	8000e0e <_ZNSt6vectorIhSaIhEED1Ev>
 8000b38:	3738      	adds	r7, #56	; 0x38
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <_ZN5Servo18calculate_checksumERKSt6vectorIhSaIhEE>:

uint8_t Servo::calculate_checksum(const Frame& _frame) {
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
	uint8_t checksum = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
	for(size_t i = 2; i< _frame.size() - 1; i++) {
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	e00b      	b.n	8000b6a <_ZN5Servo18calculate_checksumERKSt6vectorIhSaIhEE+0x2c>
		checksum += _frame[i];
 8000b52:	68b9      	ldr	r1, [r7, #8]
 8000b54:	6838      	ldr	r0, [r7, #0]
 8000b56:	f000 f995 	bl	8000e84 <_ZNKSt6vectorIhSaIhEEixEj>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	781a      	ldrb	r2, [r3, #0]
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	4413      	add	r3, r2
 8000b62:	73fb      	strb	r3, [r7, #15]
	for(size_t i = 2; i< _frame.size() - 1; i++) {
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	3301      	adds	r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	6838      	ldr	r0, [r7, #0]
 8000b6c:	f000 f97b 	bl	8000e66 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000b70:	4603      	mov	r3, r0
 8000b72:	3b01      	subs	r3, #1
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	bf34      	ite	cc
 8000b7a:	2301      	movcc	r3, #1
 8000b7c:	2300      	movcs	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1e6      	bne.n	8000b52 <_ZN5Servo18calculate_checksumERKSt6vectorIhSaIhEE+0x14>
	}
	checksum = ~(checksum);
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	43db      	mvns	r3, r3
 8000b88:	73fb      	strb	r3, [r7, #15]
	return checksum;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	0000      	movs	r0, r0
	...

08000b98 <_ZN5Servo14degrees_to_rawEd>:

uint16_t Servo::degrees_to_raw(const double _degree)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	ed87 0b00 	vstr	d0, [r7]
    uint16_t raw_position = uint16_t( _degree * SERVO_POSITION_RESOLUTION / SERVO_ANGEL_POSITION_RANGE_MAX );
 8000ba4:	a313      	add	r3, pc, #76	; (adr r3, 8000bf4 <_ZN5Servo14degrees_to_rawEd+0x5c>)
 8000ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000bae:	f7ff fb1f 	bl	80001f0 <__aeabi_dmul>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	4610      	mov	r0, r2
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <_ZN5Servo14degrees_to_rawEd+0x58>)
 8000bc0:	f7ff fc40 	bl	8000444 <__aeabi_ddiv>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	4610      	mov	r0, r2
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f7ff fd22 	bl	8000614 <__aeabi_d2uiz>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	82fb      	strh	r3, [r7, #22]

    check_limits(raw_position);
 8000bd6:	f107 0316 	add.w	r3, r7, #22
 8000bda:	4619      	mov	r1, r3
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f000 f80d 	bl	8000bfc <_ZN5Servo12check_limitsERt>


    return raw_position;
 8000be2:	8afb      	ldrh	r3, [r7, #22]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	f3af 8000 	nop.w
 8000bf0:	40768000 	.word	0x40768000
 8000bf4:	00000000 	.word	0x00000000
 8000bf8:	40affe00 	.word	0x40affe00

08000bfc <_ZN5Servo12check_limitsERt>:

void Servo::check_limits(uint16_t& _raw_position)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	if( _raw_position > SERVO_RAW_POSITION_MAX)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c0e:	d304      	bcc.n	8000c1a <_ZN5Servo12check_limitsERt+0x1e>
	{
		_raw_position = SERVO_RAW_POSITION_MAX;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c16:	801a      	strh	r2, [r3, #0]

	else if(_raw_position == SERVO_POSITION_INVALID2)
		{
			_raw_position--;
		}
}
 8000c18:	e01c      	b.n	8000c54 <_ZN5Servo12check_limitsERt+0x58>
	else if( _raw_position < SERVO_RAW_POSITION_MIN)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d018      	beq.n	8000c54 <_ZN5Servo12check_limitsERt+0x58>
	else if(_raw_position == SERVO_POSITION_INVALID1)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d106      	bne.n	8000c3c <_ZN5Servo12check_limitsERt+0x40>
			_raw_position--;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	801a      	strh	r2, [r3, #0]
}
 8000c3a:	e00b      	b.n	8000c54 <_ZN5Servo12check_limitsERt+0x58>
	else if(_raw_position == SERVO_POSITION_INVALID2)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	f640 32ff 	movw	r2, #3071	; 0xbff
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d105      	bne.n	8000c54 <_ZN5Servo12check_limitsERt+0x58>
			_raw_position--;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	801a      	strh	r2, [r3, #0]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <_ZN5Servo10set_memoryERKSt6vectorIhSaIhEENS_18ServoMemoryAddressE>:

void Servo::set_memory(const Frame& _data, const ServoMemoryAddress _address)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b08f      	sub	sp, #60	; 0x3c
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
	//uint8_t frame_length = _data.size() + 7;
	Frame frame;
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fede 	bl	8000a32 <_ZNSt6vectorIhSaIhEEC1Ev>


	//uint8_t* frame = new uint8_t[frame_length];
	frame.push_back( SERVO_FRAME_HEADER );
 8000c76:	23ff      	movs	r3, #255	; 0xff
 8000c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000c7c:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f8dc 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
	frame.push_back( SERVO_FRAME_HEADER );
 8000c8c:	23ff      	movs	r3, #255	; 0xff
 8000c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000c92:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f8d1 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
	frame.push_back( id );
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	1d1a      	adds	r2, r3, #4
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f8f8 	bl	8000ea2 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	frame.push_back( SERVO_FRAME_WRITE );
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000cb8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f8be 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
	frame.push_back( _data.size() + 3 );// packet length
 8000cc8:	68b8      	ldr	r0, [r7, #8]
 8000cca:	f000 f8cc 	bl	8000e66 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000cda:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f8ad 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
	frame.push_back( static_cast<uint8_t>(ServoMemoryAddress::acceleration) );
 8000cea:	2329      	movs	r3, #41	; 0x29
 8000cec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000cf0:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f8a2 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
	for( auto& byte : _data)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
 8000d04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d06:	f000 f8f1 	bl	8000eec <_ZNKSt6vectorIhSaIhEE5beginEv>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d10:	f000 f8fc 	bl	8000f0c <_ZNKSt6vectorIhSaIhEE3endEv>
 8000d14:	4603      	mov	r3, r0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e010      	b.n	8000d3c <_ZN5Servo10set_memoryERKSt6vectorIhSaIhEENS_18ServoMemoryAddressE+0xdc>
 8000d1a:	f107 0318 	add.w	r3, r7, #24
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f92d 	bl	8000f7e <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEdeEv>
 8000d24:	6338      	str	r0, [r7, #48]	; 0x30
	{
		frame.push_back( byte );
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 f8b8 	bl	8000ea2 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	for( auto& byte : _data)
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f911 	bl	8000f5e <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEppEv>
 8000d3c:	f107 0214 	add.w	r2, r7, #20
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f8f1 	bl	8000f2e <_ZN9__gnu_cxxneIPKhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1e3      	bne.n	8000d1a <_ZN5Servo10set_memoryERKSt6vectorIhSaIhEENS_18ServoMemoryAddressE+0xba>

//	for(int i = 0 ; i < frame_length ; i++)
//	{
//		frame[i+6] = _data[i];
//	}
	frame.push_back( calculate_checksum( frame ) );
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f7ff fef0 	bl	8000b3e <_ZN5Servo18calculate_checksumERKSt6vectorIhSaIhEE>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d64:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f868 	bl	8000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>
	mcu_uart5_transmit( frame.data(), frame.size() );
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f90c 	bl	8000f96 <_ZNSt6vectorIhSaIhEE4dataEv>
 8000d7e:	4604      	mov	r4, r0
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f86e 	bl	8000e66 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4620      	mov	r0, r4
 8000d92:	f7ff fddd 	bl	8000950 <_Z18mcu_uart5_transmitPKhh>
}
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f837 	bl	8000e0e <_ZNSt6vectorIhSaIhEED1Ev>
 8000da0:	373c      	adds	r7, #60	; 0x3c
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}

08000da6 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f900 	bl	8000fb4 <_ZNSaIhEC1Ev>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f908 	bl	8000fcc <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 f910 	bl	8000ff4 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8000df4:	461a      	mov	r2, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f907 	bl	800100a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fdfe 	bl	8000a00 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000e0e:	b5b0      	push	{r4, r5, r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681c      	ldr	r4, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f905 	bl	8001030 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000e26:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4629      	mov	r1, r5
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f000 f90a 	bl	8001046 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ffd2 	bl	8000dde <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}

08000e44 <_ZNSt6vectorIhSaIhEE9push_backEOh>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	f000 f907 	bl	8001062 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4619      	mov	r1, r3
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f90d 	bl	8001078 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEERhDpOT_>
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_ZNKSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	4413      	add	r3, r2
      }
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d00c      	beq.n	8000ed2 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f000 f90b 	bl	80010dc <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	605a      	str	r2, [r3, #4]
      }
 8000ed0:	e008      	b.n	8000ee4 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x42>
	  _M_realloc_insert(end(), __x);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f915 	bl	8001102 <_ZNSt6vectorIhSaIhEE3endEv>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f920 	bl	8001124 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f98b 	bl	8001218 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	1d1a      	adds	r2, r3, #4
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f97a 	bl	8001218 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_ZN9__gnu_cxxneIPKhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000f2e:	b590      	push	{r4, r7, lr}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 f97d 	bl	8001238 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	681c      	ldr	r4, [r3, #0]
 8000f42:	6838      	ldr	r0, [r7, #0]
 8000f44:	f000 f978 	bl	8001238 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	429c      	cmp	r4, r3
 8000f4e:	bf14      	ite	ne
 8000f50:	2301      	movne	r3, #1
 8000f52:	2300      	moveq	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd90      	pop	{r4, r7, pc}

08000f5e <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	601a      	str	r2, [r3, #0]
	return *this;
 8000f70:	687b      	ldr	r3, [r7, #4]
      }
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_ZNSt6vectorIhSaIhEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f952 	bl	800124e <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f952 	bl	8001266 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
	{ }
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
	if (__p)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f92a 	bl	800127c <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f000 f920 	bl	800129a <_ZSt8_DestroyIPhEvT_S1_>
    }
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEERhDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	429a      	cmp	r2, r3
 800108c:	d011      	beq.n	80010b2 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEERhDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800108e:	687c      	ldr	r4, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685d      	ldr	r5, [r3, #4]
 8001094:	6838      	ldr	r0, [r7, #0]
 8001096:	f000 f90d 	bl	80012b4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4629      	mov	r1, r5
 80010a0:	4620      	mov	r0, r4
 80010a2:	f000 f912 	bl	80012ca <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	e00c      	b.n	80010cc <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEERhDpOT_+0x54>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f825 	bl	8001102 <_ZNSt6vectorIhSaIhEE3endEv>
 80010b8:	4604      	mov	r4, r0
 80010ba:	6838      	ldr	r0, [r7, #0]
 80010bc:	f000 f8fa 	bl	80012b4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4621      	mov	r1, r4
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f912 	bl	80012f0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f989 	bl	80013e4 <_ZNSt6vectorIhSaIhEE4backEv>
 80010d2:	4603      	mov	r3, r0
#endif
      }
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bdb0      	pop	{r4, r5, r7, pc}

080010dc <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f996 	bl	800141a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f000 f99b 	bl	8001430 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>
	}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	1d1a      	adds	r2, r3, #4
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f9a2 	bl	800145e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001130:	4a38      	ldr	r2, [pc, #224]	; (8001214 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xf0>)
 8001132:	2101      	movs	r1, #1
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 f9a2 	bl	800147e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 800113a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f000 f9df 	bl	800150c <_ZNSt6vectorIhSaIhEE5beginEv>
 800114e:	4603      	mov	r3, r0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	f107 0214 	add.w	r2, r7, #20
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f9e5 	bl	800152c <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8001162:	4603      	mov	r3, r0
 8001164:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f9f2 	bl	8001554 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8001170:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8001176:	68fc      	ldr	r4, [r7, #12]
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	18d5      	adds	r5, r2, r3
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f94b 	bl	800141a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4629      	mov	r1, r5
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff ffa6 	bl	80010dc <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fa03 	bl	80015a4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800119e:	4603      	mov	r3, r0
 80011a0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff43 	bl	8001030 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80011aa:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	4621      	mov	r1, r4
 80011b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011b2:	f000 f9e3 	bl	800157c <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 80011b6:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	3301      	adds	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f9ee 	bl	80015a4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80011c8:	4603      	mov	r3, r0
 80011ca:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff2e 	bl	8001030 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80011d4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011da:	4620      	mov	r0, r4
 80011dc:	f000 f9ce 	bl	800157c <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 80011e0:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80011e2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 80011ec:	461a      	mov	r2, r3
 80011ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011f0:	f7ff ff0b 	bl	800100a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001204:	441a      	add	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	609a      	str	r2, [r3, #8]
    }
 800120a:	bf00      	nop
 800120c:	3730      	adds	r7, #48	; 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bdb0      	pop	{r4, r5, r7, pc}
 8001212:	bf00      	nop
 8001214:	080038e8 	.word	0x080038e8

08001218 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f000 f994 	bl	80015ba <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80012a4:	6839      	ldr	r1, [r7, #0]
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f994 	bl	80015d4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffec 	bl	80012b4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 f981 	bl	80015ea <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJhEEEvPT_DpOT0_>
	}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80012fc:	4a38      	ldr	r2, [pc, #224]	; (80013e0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xf0>)
 80012fe:	2101      	movs	r1, #1
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 f8bc 	bl	800147e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8001306:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 f8f9 	bl	800150c <_ZNSt6vectorIhSaIhEE5beginEv>
 800131a:	4603      	mov	r3, r0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	f107 0214 	add.w	r2, r7, #20
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f8ff 	bl	800152c <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800132e:	4603      	mov	r3, r0
 8001330:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f90c 	bl	8001554 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800133c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8001342:	68fc      	ldr	r4, [r7, #12]
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	18d5      	adds	r5, r2, r3
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffb2 	bl	80012b4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4629      	mov	r1, r5
 8001356:	4620      	mov	r0, r4
 8001358:	f7ff ffb7 	bl	80012ca <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f91d 	bl	80015a4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800136a:	4603      	mov	r3, r0
 800136c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fe5d 	bl	8001030 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001376:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	4621      	mov	r1, r4
 800137c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800137e:	f000 f8fd 	bl	800157c <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8001382:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	3301      	adds	r3, #1
 8001388:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f908 	bl	80015a4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001394:	4603      	mov	r3, r0
 8001396:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fe48 	bl	8001030 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80013a0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013a6:	4620      	mov	r0, r4
 80013a8:	f000 f8e8 	bl	800157c <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 80013ac:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80013ae:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b6:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 80013b8:	461a      	mov	r2, r3
 80013ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013bc:	f7ff fe25 	bl	800100a <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	609a      	str	r2, [r3, #8]
    }
 80013d6:	bf00      	nop
 80013d8:	3730      	adds	r7, #48	; 0x30
 80013da:	46bd      	mov	sp, r7
 80013dc:	bdb0      	pop	{r4, r5, r7, pc}
 80013de:	bf00      	nop
 80013e0:	080038e8 	.word	0x080038e8

080013e4 <_ZNSt6vectorIhSaIhEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fe88 	bl	8001102 <_ZNSt6vectorIhSaIhEE3endEv>
 80013f2:	4603      	mov	r3, r0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2101      	movs	r1, #1
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 f90b 	bl	8001618 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEmiEi>
 8001402:	4603      	mov	r3, r0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f91c 	bl	8001648 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>
 8001410:	4603      	mov	r3, r0
      }
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ffec 	bl	800141a <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8001442:	4603      	mov	r3, r0
 8001444:	781c      	ldrb	r4, [r3, #0]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	4619      	mov	r1, r3
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff fa96 	bl	800097c <_ZnwjPv>
 8001450:	4603      	mov	r3, r0
 8001452:	4622      	mov	r2, r4
 8001454:	701a      	strb	r2, [r3, #0]
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}

0800145e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800147e:	b590      	push	{r4, r7, lr}
 8001480:	b087      	sub	sp, #28
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 f8e8 	bl	8001660 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8001490:	4604      	mov	r4, r0
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f7ff fce7 	bl	8000e66 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001498:	4603      	mov	r3, r0
 800149a:	1ae2      	subs	r2, r4, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	429a      	cmp	r2, r3
 80014a0:	bf34      	ite	cc
 80014a2:	2301      	movcc	r3, #1
 80014a4:	2300      	movcs	r3, #0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f002 f84f 	bl	8003550 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f7ff fcd7 	bl	8000e66 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80014b8:	4604      	mov	r4, r0
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f7ff fcd3 	bl	8000e66 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80014c0:	4603      	mov	r3, r0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	f107 0208 	add.w	r2, r7, #8
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f8d7 	bl	8001682 <_ZSt3maxIjERKT_S2_S2_>
 80014d4:	4603      	mov	r3, r0
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4423      	add	r3, r4
 80014da:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff fcc2 	bl	8000e66 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d306      	bcc.n	80014f8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 f8b8 	bl	8001660 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d904      	bls.n	8001502 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 f8b1 	bl	8001660 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80014fe:	4603      	mov	r3, r0
 8001500:	e000      	b.n	8001504 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8001502:	697b      	ldr	r3, [r7, #20]
      }
 8001504:	4618      	mov	r0, r3
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}

0800150c <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff9e 	bl	800145e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f834 	bl	80015a4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800153c:	4603      	mov	r3, r0
 800153e:	681c      	ldr	r4, [r3, #0]
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f000 f82f 	bl	80015a4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001546:	4603      	mov	r3, r0
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	1ae3      	subs	r3, r4, r3
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	bd90      	pop	{r4, r7, pc}

08001554 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6839      	ldr	r1, [r7, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f89e 	bl	80016aa <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 800156e:	4603      	mov	r3, r0
 8001570:	e000      	b.n	8001574 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8001572:	2300      	movs	r3, #0
      }
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b087      	sub	sp, #28
 8001580:	af02      	add	r7, sp, #8
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800158a:	f88d 4000 	strb.w	r4, [sp]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 f897 	bl	80016c8 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 800159a:	4603      	mov	r3, r0
      }
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}

080015a4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	68b8      	ldr	r0, [r7, #8]
 80015ca:	f001 ffab 	bl	8003524 <_ZdlPvj>
      }
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJhEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80015ea:	b590      	push	{r4, r7, lr}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fe5c 	bl	80012b4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80015fc:	4603      	mov	r3, r0
 80015fe:	781c      	ldrb	r4, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4619      	mov	r1, r3
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff f9b9 	bl	800097c <_ZnwjPv>
 800160a:	4603      	mov	r3, r0
 800160c:	4622      	mov	r2, r4
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}

08001618 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	425b      	negs	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	f107 020c 	add.w	r2, r7, #12
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff10 	bl	800145e <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f858 	bl	8001720 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001670:	4603      	mov	r3, r0
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f83a 	bl	80016ec <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8001678:	4603      	mov	r3, r0
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d201      	bcs.n	800169c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	e000      	b.n	800169e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800169c:	687b      	ldr	r3, [r7, #4]
    }
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80016b4:	2200      	movs	r2, #0
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f848 	bl	800174e <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80016be:	4603      	mov	r3, r0
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 f858 	bl	8001792 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80016e2:	4603      	mov	r3, r0
      }
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80016f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80016f8:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f866 	bl	80017cc <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8001700:	4603      	mov	r3, r0
 8001702:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001704:	f107 0208 	add.w	r2, r7, #8
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f868 	bl	80017e4 <_ZSt3minIjERKT_S2_S2_>
 8001714:	4603      	mov	r3, r0
 8001716:	681b      	ldr	r3, [r3, #0]
      }
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800173e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7ff ffeb 	bl	8001736 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	4293      	cmp	r3, r2
 8001766:	bf8c      	ite	hi
 8001768:	2301      	movhi	r3, #1
 800176a:	2300      	movls	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf14      	ite	ne
 8001772:	2301      	movne	r3, #1
 8001774:	2300      	moveq	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 800177c:	f001 fee5 	bl	800354a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001780:	68b8      	ldr	r0, [r7, #8]
 8001782:	f001 fed1 	bl	8003528 <_Znwj>
 8001786:	4603      	mov	r3, r0
 8001788:	bf00      	nop
      }
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8001792:	b5b0      	push	{r4, r5, r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f000 f833 	bl	800180c <_ZSt12__niter_baseIPhET_S1_>
 80017a6:	4604      	mov	r4, r0
 80017a8:	68b8      	ldr	r0, [r7, #8]
 80017aa:	f000 f82f 	bl	800180c <_ZSt12__niter_baseIPhET_S1_>
 80017ae:	4605      	mov	r5, r0
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f82b 	bl	800180c <_ZSt12__niter_baseIPhET_S1_>
 80017b6:	4602      	mov	r2, r0
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4629      	mov	r1, r5
 80017bc:	4620      	mov	r0, r4
 80017be:	f000 f830 	bl	8001822 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80017c2:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bdb0      	pop	{r4, r5, r7, pc}

080017cc <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f83f 	bl	8001858 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 80017da:	4603      	mov	r3, r0
      }
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d201      	bcs.n	80017fe <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	e000      	b.n	8001800 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80017fe:	687b      	ldr	r3, [r7, #4]
    }
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_ZSt12__niter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	dd05      	ble.n	800184a <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	461a      	mov	r2, r3
 8001842:	68f9      	ldr	r1, [r7, #12]
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f001 ff55 	bl	80036f4 <memmove>
      return __result + __count;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	4413      	add	r3, r2
    }
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff68 	bl	8001736 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8001866:	4603      	mov	r3, r0
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001876:	f000 fa47 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800187a:	f000 f839 	bl	80018f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187e:	f000 f8e7 	bl	8001a50 <_ZL12MX_GPIO_Initv>
  MX_UART5_Init();
 8001882:	f000 f8b5 	bl	80019f0 <_ZL13MX_UART5_Initv>
  /* USER CODE BEGIN 2 */
  Servo servo(1);
 8001886:	463b      	mov	r3, r7
 8001888:	2101      	movs	r1, #1
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f882 	bl	8000994 <_ZN5ServoC1Eh>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* USER CODE END WHILE */
	  servo.set_position(400, 5, 300);
 8001890:	463b      	mov	r3, r7
 8001892:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 80018d0 <main+0x60>
 8001896:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80018d8 <main+0x68>
 800189a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80018e0 <main+0x70>
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f8d4 	bl	8000a4c <_ZN5Servo12set_positionEddd>
	  HAL_Delay(9000);
 80018a4:	f242 3028 	movw	r0, #9000	; 0x2328
 80018a8:	f000 faa0 	bl	8001dec <HAL_Delay>
	  servo.set_position(0, 5, 5);
 80018ac:	463b      	mov	r3, r7
 80018ae:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 80018d8 <main+0x68>
 80018b2:	ed9f 1b09 	vldr	d1, [pc, #36]	; 80018d8 <main+0x68>
 80018b6:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80018e8 <main+0x78>
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f8c6 	bl	8000a4c <_ZN5Servo12set_positionEddd>
	  HAL_Delay(9000);
 80018c0:	f242 3028 	movw	r0, #9000	; 0x2328
 80018c4:	f000 fa92 	bl	8001dec <HAL_Delay>
	  servo.set_position(400, 5, 300);
 80018c8:	e7e2      	b.n	8001890 <main+0x20>
 80018ca:	bf00      	nop
 80018cc:	f3af 8000 	nop.w
 80018d0:	00000000 	.word	0x00000000
 80018d4:	4072c000 	.word	0x4072c000
 80018d8:	00000000 	.word	0x00000000
 80018dc:	40140000 	.word	0x40140000
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40790000 	.word	0x40790000
	...

080018f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b094      	sub	sp, #80	; 0x50
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 0320 	add.w	r3, r7, #32
 80018fa:	2230      	movs	r2, #48	; 0x30
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 ff12 	bl	8003728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <_Z18SystemClock_Configv+0xf8>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <_Z18SystemClock_Configv+0xf8>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001922:	6413      	str	r3, [r2, #64]	; 0x40
 8001924:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <_Z18SystemClock_Configv+0xf8>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <_Z18SystemClock_Configv+0xfc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2c      	ldr	r2, [pc, #176]	; (80019ec <_Z18SystemClock_Configv+0xfc>)
 800193a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <_Z18SystemClock_Configv+0xfc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800194c:	2301      	movs	r3, #1
 800194e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001956:	2302      	movs	r3, #2
 8001958:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001960:	2304      	movs	r3, #4
 8001962:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001964:	23b4      	movs	r3, #180	; 0xb4
 8001966:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001968:	2302      	movs	r3, #2
 800196a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800196c:	2307      	movs	r3, #7
 800196e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001970:	f107 0320 	add.w	r3, r7, #32
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fd3f 	bl	80023f8 <HAL_RCC_OscConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800198a:	f000 f889 	bl	8001aa0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800198e:	f000 fce3 	bl	8002358 <HAL_PWREx_EnableOverDrive>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 80019a2:	f000 f87d 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a6:	230f      	movs	r3, #15
 80019a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019aa:	2302      	movs	r3, #2
 80019ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	2105      	movs	r1, #5
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 ff8f 	bl	80028e8 <HAL_RCC_ClockConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf14      	ite	ne
 80019d0:	2301      	movne	r3, #1
 80019d2:	2300      	moveq	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 80019da:	f000 f861 	bl	8001aa0 <Error_Handler>
  }
}
 80019de:	bf00      	nop
 80019e0:	3750      	adds	r7, #80	; 0x50
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000

080019f0 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <_ZL13MX_UART5_Initv+0x54>)
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_ZL13MX_UART5_Initv+0x58>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <_ZL13MX_UART5_Initv+0x54>)
 80019fc:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <_ZL13MX_UART5_Initv+0x5c>)
 80019fe:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <_ZL13MX_UART5_Initv+0x54>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <_ZL13MX_UART5_Initv+0x54>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <_ZL13MX_UART5_Initv+0x54>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <_ZL13MX_UART5_Initv+0x54>)
 8001a14:	220c      	movs	r2, #12
 8001a16:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <_ZL13MX_UART5_Initv+0x54>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <_ZL13MX_UART5_Initv+0x54>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 8001a24:	4807      	ldr	r0, [pc, #28]	; (8001a44 <_ZL13MX_UART5_Initv+0x54>)
 8001a26:	f001 f97f 	bl	8002d28 <HAL_HalfDuplex_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <_ZL13MX_UART5_Initv+0x4e>
  {
    Error_Handler();
 8001a3a:	f000 f831 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000078 	.word	0x20000078
 8001a48:	40005000 	.word	0x40005000
 8001a4c:	000f4240 	.word	0x000f4240

08001a50 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <_ZL12MX_GPIO_Initv+0x4c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <_ZL12MX_GPIO_Initv+0x4c>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <_ZL12MX_GPIO_Initv+0x4c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <_ZL12MX_GPIO_Initv+0x4c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <_ZL12MX_GPIO_Initv+0x4c>)
 8001a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <_ZL12MX_GPIO_Initv+0x4c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <Error_Handler+0x8>
	...

08001aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <HAL_MspInit+0x4c>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_MspInit+0x4c>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <HAL_MspInit+0x4c>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_MspInit+0x4c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800

08001afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a19      	ldr	r2, [pc, #100]	; (8001b80 <HAL_UART_MspInit+0x84>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d12c      	bne.n	8001b78 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_UART_MspInit+0x88>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_UART_MspInit+0x88>)
 8001b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_UART_MspInit+0x88>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_UART_MspInit+0x88>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <HAL_UART_MspInit+0x88>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_UART_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5c:	2312      	movs	r3, #18
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <HAL_UART_MspInit+0x8c>)
 8001b74:	f000 fa44 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	; 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40005000 	.word	0x40005000
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020800 	.word	0x40020800

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <NMI_Handler+0x4>

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <MemManage_Handler+0x4>

08001b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd8:	f000 f8e8 	bl	8001dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return 1;
 8001be4:	2301      	movs	r3, #1
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_kill>:

int _kill(int pid, int sig)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bfa:	f001 fdf1 	bl	80037e0 <__errno>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2216      	movs	r2, #22
 8001c02:	601a      	str	r2, [r3, #0]
  return -1;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_exit>:

void _exit (int status)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ffe7 	bl	8001bf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c22:	e7fe      	b.n	8001c22 <_exit+0x12>

08001c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <_sbrk+0x5c>)
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <_sbrk+0x60>)
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <_sbrk+0x64>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <_sbrk+0x68>)
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d207      	bcs.n	8001c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c54:	f001 fdc4 	bl	80037e0 <__errno>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	e009      	b.n	8001c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <_sbrk+0x64>)
 8001c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20030000 	.word	0x20030000
 8001c84:	00000400 	.word	0x00000400
 8001c88:	200000bc 	.word	0x200000bc
 8001c8c:	20000210 	.word	0x20000210

08001c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <SystemInit+0x20>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <SystemInit+0x20>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cba:	490e      	ldr	r1, [pc, #56]	; (8001cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc0:	e002      	b.n	8001cc8 <LoopCopyDataInit>

08001cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc6:	3304      	adds	r3, #4

08001cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ccc:	d3f9      	bcc.n	8001cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd0:	4c0b      	ldr	r4, [pc, #44]	; (8001d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd4:	e001      	b.n	8001cda <LoopFillZerobss>

08001cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd8:	3204      	adds	r2, #4

08001cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cdc:	d3fb      	bcc.n	8001cd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cde:	f7ff ffd7 	bl	8001c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce2:	f001 fd83 	bl	80037ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce6:	f7ff fdc3 	bl	8001870 <main>
  bx  lr    
 8001cea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001cf8:	0800393c 	.word	0x0800393c
  ldr r2, =_sbss
 8001cfc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d00:	20000210 	.word	0x20000210

08001d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <ADC_IRQHandler>
	...

08001d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <HAL_Init+0x40>)
 8001d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <HAL_Init+0x40>)
 8001d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <HAL_Init+0x40>)
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f000 f931 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 f808 	bl	8001d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d3c:	f7ff feb6 	bl	8001aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_InitTick+0x54>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_InitTick+0x58>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f93b 	bl	8001fe6 <HAL_SYSTICK_Config>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00e      	b.n	8001d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b0f      	cmp	r3, #15
 8001d7e:	d80a      	bhi.n	8001d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d80:	2200      	movs	r2, #0
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f000 f911 	bl	8001fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d8c:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <HAL_InitTick+0x5c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000008 	.word	0x20000008
 8001da8:	20000004 	.word	0x20000004

08001dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_IncTick+0x20>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x24>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <HAL_IncTick+0x24>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	200000c0 	.word	0x200000c0

08001dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_GetTick+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	200000c0 	.word	0x200000c0

08001dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff ffee 	bl	8001dd4 <HAL_GetTick>
 8001df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d005      	beq.n	8001e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_Delay+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e12:	bf00      	nop
 8001e14:	f7ff ffde 	bl	8001dd4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d8f7      	bhi.n	8001e14 <HAL_Delay+0x28>
  {
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff8e 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff47 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff5c 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff8e 	bl	8001eec <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5d 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffb0 	bl	8001f54 <SysTick_Config>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	e177      	b.n	800230c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800201c:	2201      	movs	r2, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	429a      	cmp	r2, r3
 8002036:	f040 8166 	bne.w	8002306 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d005      	beq.n	8002052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204e:	2b02      	cmp	r3, #2
 8002050:	d130      	bne.n	80020b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 0201 	and.w	r2, r3, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d017      	beq.n	80020f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d123      	bne.n	8002144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0203 	and.w	r2, r3, #3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80c0 	beq.w	8002306 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b66      	ldr	r3, [pc, #408]	; (8002324 <HAL_GPIO_Init+0x324>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a65      	ldr	r2, [pc, #404]	; (8002324 <HAL_GPIO_Init+0x324>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b63      	ldr	r3, [pc, #396]	; (8002324 <HAL_GPIO_Init+0x324>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a2:	4a61      	ldr	r2, [pc, #388]	; (8002328 <HAL_GPIO_Init+0x328>)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a58      	ldr	r2, [pc, #352]	; (800232c <HAL_GPIO_Init+0x32c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d037      	beq.n	800223e <HAL_GPIO_Init+0x23e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a57      	ldr	r2, [pc, #348]	; (8002330 <HAL_GPIO_Init+0x330>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d031      	beq.n	800223a <HAL_GPIO_Init+0x23a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a56      	ldr	r2, [pc, #344]	; (8002334 <HAL_GPIO_Init+0x334>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02b      	beq.n	8002236 <HAL_GPIO_Init+0x236>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a55      	ldr	r2, [pc, #340]	; (8002338 <HAL_GPIO_Init+0x338>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d025      	beq.n	8002232 <HAL_GPIO_Init+0x232>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a54      	ldr	r2, [pc, #336]	; (800233c <HAL_GPIO_Init+0x33c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01f      	beq.n	800222e <HAL_GPIO_Init+0x22e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a53      	ldr	r2, [pc, #332]	; (8002340 <HAL_GPIO_Init+0x340>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d019      	beq.n	800222a <HAL_GPIO_Init+0x22a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_GPIO_Init+0x344>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x226>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a51      	ldr	r2, [pc, #324]	; (8002348 <HAL_GPIO_Init+0x348>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x222>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a50      	ldr	r2, [pc, #320]	; (800234c <HAL_GPIO_Init+0x34c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x21e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4f      	ldr	r2, [pc, #316]	; (8002350 <HAL_GPIO_Init+0x350>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x21a>
 8002216:	2309      	movs	r3, #9
 8002218:	e012      	b.n	8002240 <HAL_GPIO_Init+0x240>
 800221a:	230a      	movs	r3, #10
 800221c:	e010      	b.n	8002240 <HAL_GPIO_Init+0x240>
 800221e:	2308      	movs	r3, #8
 8002220:	e00e      	b.n	8002240 <HAL_GPIO_Init+0x240>
 8002222:	2307      	movs	r3, #7
 8002224:	e00c      	b.n	8002240 <HAL_GPIO_Init+0x240>
 8002226:	2306      	movs	r3, #6
 8002228:	e00a      	b.n	8002240 <HAL_GPIO_Init+0x240>
 800222a:	2305      	movs	r3, #5
 800222c:	e008      	b.n	8002240 <HAL_GPIO_Init+0x240>
 800222e:	2304      	movs	r3, #4
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x240>
 8002232:	2303      	movs	r3, #3
 8002234:	e004      	b.n	8002240 <HAL_GPIO_Init+0x240>
 8002236:	2302      	movs	r3, #2
 8002238:	e002      	b.n	8002240 <HAL_GPIO_Init+0x240>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x240>
 800223e:	2300      	movs	r3, #0
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002250:	4935      	ldr	r1, [pc, #212]	; (8002328 <HAL_GPIO_Init+0x328>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <HAL_GPIO_Init+0x354>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002282:	4a34      	ldr	r2, [pc, #208]	; (8002354 <HAL_GPIO_Init+0x354>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002288:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HAL_GPIO_Init+0x354>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022ac:	4a29      	ldr	r2, [pc, #164]	; (8002354 <HAL_GPIO_Init+0x354>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b2:	4b28      	ldr	r3, [pc, #160]	; (8002354 <HAL_GPIO_Init+0x354>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d6:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <HAL_GPIO_Init+0x354>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_GPIO_Init+0x354>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002300:	4a14      	ldr	r2, [pc, #80]	; (8002354 <HAL_GPIO_Init+0x354>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b0f      	cmp	r3, #15
 8002310:	f67f ae84 	bls.w	800201c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40013800 	.word	0x40013800
 800232c:	40020000 	.word	0x40020000
 8002330:	40020400 	.word	0x40020400
 8002334:	40020800 	.word	0x40020800
 8002338:	40020c00 	.word	0x40020c00
 800233c:	40021000 	.word	0x40021000
 8002340:	40021400 	.word	0x40021400
 8002344:	40021800 	.word	0x40021800
 8002348:	40021c00 	.word	0x40021c00
 800234c:	40022000 	.word	0x40022000
 8002350:	40022400 	.word	0x40022400
 8002354:	40013c00 	.word	0x40013c00

08002358 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4a1f      	ldr	r2, [pc, #124]	; (80023e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002370:	6413      	str	r3, [r2, #64]	; 0x40
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_PWREx_EnableOverDrive+0x94>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002384:	f7ff fd26 	bl	8001dd4 <HAL_GetTick>
 8002388:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800238a:	e009      	b.n	80023a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800238c:	f7ff fd22 	bl	8001dd4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800239a:	d901      	bls.n	80023a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e01f      	b.n	80023e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d1ee      	bne.n	800238c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b4:	f7ff fd0e 	bl	8001dd4 <HAL_GetTick>
 80023b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023ba:	e009      	b.n	80023d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023bc:	f7ff fd0a 	bl	8001dd4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ca:	d901      	bls.n	80023d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e007      	b.n	80023e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023dc:	d1ee      	bne.n	80023bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800
 80023ec:	420e0040 	.word	0x420e0040
 80023f0:	40007000 	.word	0x40007000
 80023f4:	420e0044 	.word	0x420e0044

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e267      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d075      	beq.n	8002502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002416:	4b88      	ldr	r3, [pc, #544]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d00c      	beq.n	800243c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002422:	4b85      	ldr	r3, [pc, #532]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242a:	2b08      	cmp	r3, #8
 800242c:	d112      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242e:	4b82      	ldr	r3, [pc, #520]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800243a:	d10b      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	4b7e      	ldr	r3, [pc, #504]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d05b      	beq.n	8002500 <HAL_RCC_OscConfig+0x108>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d157      	bne.n	8002500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e242      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x74>
 800245e:	4b76      	ldr	r3, [pc, #472]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a75      	ldr	r2, [pc, #468]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x98>
 8002476:	4b70      	ldr	r3, [pc, #448]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6f      	ldr	r2, [pc, #444]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6d      	ldr	r3, [pc, #436]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6c      	ldr	r2, [pc, #432]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 8002490:	4b69      	ldr	r3, [pc, #420]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a68      	ldr	r2, [pc, #416]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b66      	ldr	r3, [pc, #408]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a65      	ldr	r2, [pc, #404]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fc90 	bl	8001dd4 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fc8c 	bl	8001dd4 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e207      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b5b      	ldr	r3, [pc, #364]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xc0>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff fc7c 	bl	8001dd4 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff fc78 	bl	8001dd4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1f3      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	4b51      	ldr	r3, [pc, #324]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0xe8>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250e:	4b4a      	ldr	r3, [pc, #296]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b47      	ldr	r3, [pc, #284]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002522:	2b08      	cmp	r3, #8
 8002524:	d11c      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002526:	4b44      	ldr	r3, [pc, #272]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	4b41      	ldr	r3, [pc, #260]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1c7      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4937      	ldr	r1, [pc, #220]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	e03a      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002568:	4b34      	ldr	r3, [pc, #208]	; (800263c <HAL_RCC_OscConfig+0x244>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7ff fc31 	bl	8001dd4 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002576:	f7ff fc2d 	bl	8001dd4 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1a8      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4925      	ldr	r1, [pc, #148]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_RCC_OscConfig+0x244>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7ff fc10 	bl	8001dd4 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b8:	f7ff fc0c 	bl	8001dd4 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e187      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d036      	beq.n	8002650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_RCC_OscConfig+0x248>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7ff fbf0 	bl	8001dd4 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff fbec 	bl	8001dd4 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e167      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_OscConfig+0x240>)
 800260c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x200>
 8002616:	e01b      	b.n	8002650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_OscConfig+0x248>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7ff fbd9 	bl	8001dd4 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	e00e      	b.n	8002644 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002626:	f7ff fbd5 	bl	8001dd4 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d907      	bls.n	8002644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e150      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
 8002638:	40023800 	.word	0x40023800
 800263c:	42470000 	.word	0x42470000
 8002640:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	4b88      	ldr	r3, [pc, #544]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ea      	bne.n	8002626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8097 	beq.w	800278c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002662:	4b81      	ldr	r3, [pc, #516]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	4b7d      	ldr	r3, [pc, #500]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a7c      	ldr	r2, [pc, #496]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b7a      	ldr	r3, [pc, #488]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268e:	4b77      	ldr	r3, [pc, #476]	; (800286c <HAL_RCC_OscConfig+0x474>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269a:	4b74      	ldr	r3, [pc, #464]	; (800286c <HAL_RCC_OscConfig+0x474>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a73      	ldr	r2, [pc, #460]	; (800286c <HAL_RCC_OscConfig+0x474>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7ff fb95 	bl	8001dd4 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7ff fb91 	bl	8001dd4 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e10c      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	4b6a      	ldr	r3, [pc, #424]	; (800286c <HAL_RCC_OscConfig+0x474>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2ea>
 80026d4:	4b64      	ldr	r3, [pc, #400]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a63      	ldr	r2, [pc, #396]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
 80026e0:	e01c      	b.n	800271c <HAL_RCC_OscConfig+0x324>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x30c>
 80026ea:	4b5f      	ldr	r3, [pc, #380]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a5e      	ldr	r2, [pc, #376]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	4b5c      	ldr	r3, [pc, #368]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a5b      	ldr	r2, [pc, #364]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0x324>
 8002704:	4b58      	ldr	r3, [pc, #352]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a57      	ldr	r2, [pc, #348]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	4b55      	ldr	r3, [pc, #340]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a54      	ldr	r2, [pc, #336]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002716:	f023 0304 	bic.w	r3, r3, #4
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d015      	beq.n	8002750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7ff fb56 	bl	8001dd4 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7ff fb52 	bl	8001dd4 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e0cb      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002742:	4b49      	ldr	r3, [pc, #292]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ee      	beq.n	800272c <HAL_RCC_OscConfig+0x334>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002750:	f7ff fb40 	bl	8001dd4 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7ff fb3c 	bl	8001dd4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0b5      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	4b3e      	ldr	r3, [pc, #248]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1ee      	bne.n	8002758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	4b39      	ldr	r3, [pc, #228]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	4a38      	ldr	r2, [pc, #224]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a1 	beq.w	80028d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002796:	4b34      	ldr	r3, [pc, #208]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d05c      	beq.n	800285c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d141      	bne.n	800282e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff fb10 	bl	8001dd4 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b8:	f7ff fb0c 	bl	8001dd4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e087      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	3b01      	subs	r3, #1
 80027f0:	041b      	lsls	r3, r3, #16
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	491b      	ldr	r1, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7ff fae5 	bl	8001dd4 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280e:	f7ff fae1 	bl	8001dd4 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e05c      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x416>
 800282c:	e054      	b.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_RCC_OscConfig+0x478>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7ff face 	bl	8001dd4 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283c:	f7ff faca 	bl	8001dd4 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e045      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_RCC_OscConfig+0x470>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x444>
 800285a:	e03d      	b.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e038      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000
 8002870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x4ec>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d028      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d121      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d11a      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d111      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0cc      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d90c      	bls.n	8002924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b65      	ldr	r3, [pc, #404]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0b8      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002954:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	494d      	ldr	r1, [pc, #308]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d044      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d119      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e07f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e06f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e067      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f023 0203 	bic.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4934      	ldr	r1, [pc, #208]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d8:	f7ff f9fc 	bl	8001dd4 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e0:	f7ff f9f8 	bl	8001dd4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e04f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 020c 	and.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1eb      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d20c      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e032      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4916      	ldr	r1, [pc, #88]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a6e:	f000 f821 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	490a      	ldr	r1, [pc, #40]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	5ccb      	ldrb	r3, [r1, r3]
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff f95c 	bl	8001d4c <HAL_InitTick>

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	08003914 	.word	0x08003914
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab8:	b094      	sub	sp, #80	; 0x50
 8002aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	647b      	str	r3, [r7, #68]	; 0x44
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002acc:	4b79      	ldr	r3, [pc, #484]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d00d      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	f200 80e1 	bhi.w	8002ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ae6:	e0db      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae8:	4b73      	ldr	r3, [pc, #460]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002aec:	e0db      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aee:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x208>)
 8002af0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af2:	e0d8      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af4:	4b6f      	ldr	r3, [pc, #444]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002afc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afe:	4b6d      	ldr	r3, [pc, #436]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d063      	beq.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0a:	4b6a      	ldr	r3, [pc, #424]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	2200      	movs	r2, #0
 8002b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1e:	2300      	movs	r3, #0
 8002b20:	637b      	str	r3, [r7, #52]	; 0x34
 8002b22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	f04f 0000 	mov.w	r0, #0
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	0159      	lsls	r1, r3, #5
 8002b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b38:	0150      	lsls	r0, r2, #5
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4621      	mov	r1, r4
 8002b40:	1a51      	subs	r1, r2, r1
 8002b42:	6139      	str	r1, [r7, #16]
 8002b44:	4629      	mov	r1, r5
 8002b46:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b58:	4659      	mov	r1, fp
 8002b5a:	018b      	lsls	r3, r1, #6
 8002b5c:	4651      	mov	r1, sl
 8002b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b62:	4651      	mov	r1, sl
 8002b64:	018a      	lsls	r2, r1, #6
 8002b66:	4651      	mov	r1, sl
 8002b68:	ebb2 0801 	subs.w	r8, r2, r1
 8002b6c:	4659      	mov	r1, fp
 8002b6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b86:	4690      	mov	r8, r2
 8002b88:	4699      	mov	r9, r3
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	eb18 0303 	adds.w	r3, r8, r3
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	462b      	mov	r3, r5
 8002b94:	eb49 0303 	adc.w	r3, r9, r3
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	024b      	lsls	r3, r1, #9
 8002baa:	4621      	mov	r1, r4
 8002bac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	024a      	lsls	r2, r1, #9
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bba:	2200      	movs	r2, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bc4:	f7fd fd46 	bl	8000654 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4613      	mov	r3, r2
 8002bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd0:	e058      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	099b      	lsrs	r3, r3, #6
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	4611      	mov	r1, r2
 8002bde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
 8002be8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bec:	4642      	mov	r2, r8
 8002bee:	464b      	mov	r3, r9
 8002bf0:	f04f 0000 	mov.w	r0, #0
 8002bf4:	f04f 0100 	mov.w	r1, #0
 8002bf8:	0159      	lsls	r1, r3, #5
 8002bfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfe:	0150      	lsls	r0, r2, #5
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4641      	mov	r1, r8
 8002c06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c24:	ebb2 040a 	subs.w	r4, r2, sl
 8002c28:	eb63 050b 	sbc.w	r5, r3, fp
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	00eb      	lsls	r3, r5, #3
 8002c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c3a:	00e2      	lsls	r2, r4, #3
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	461d      	mov	r5, r3
 8002c40:	4643      	mov	r3, r8
 8002c42:	18e3      	adds	r3, r4, r3
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	464b      	mov	r3, r9
 8002c48:	eb45 0303 	adc.w	r3, r5, r3
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	028b      	lsls	r3, r1, #10
 8002c5e:	4621      	mov	r1, r4
 8002c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c64:	4621      	mov	r1, r4
 8002c66:	028a      	lsls	r2, r1, #10
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	61fa      	str	r2, [r7, #28]
 8002c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c78:	f7fd fcec 	bl	8000654 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4613      	mov	r3, r2
 8002c82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c9e:	e002      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ca2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3750      	adds	r7, #80	; 0x50
 8002cac:	46bd      	mov	sp, r7
 8002cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	00f42400 	.word	0x00f42400
 8002cbc:	007a1200 	.word	0x007a1200

08002cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000000 	.word	0x20000000

08002cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cdc:	f7ff fff0 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0a9b      	lsrs	r3, r3, #10
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	08003924 	.word	0x08003924

08002d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d04:	f7ff ffdc 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	0b5b      	lsrs	r3, r3, #13
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4903      	ldr	r1, [pc, #12]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40023800 	.word	0x40023800
 8002d24:	08003924 	.word	0x08003924

08002d28 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e047      	b.n	8002dca <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fe fed4 	bl	8001afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	; 0x24
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f965 	bl	800303c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002d90:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0208 	orr.w	r2, r2, #8
 8002da0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002db0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b08a      	sub	sp, #40	; 0x28
 8002dd6:	af02      	add	r7, sp, #8
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	4613      	mov	r3, r2
 8002de0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d17c      	bne.n	8002eec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_UART_Transmit+0x2c>
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e075      	b.n	8002eee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_UART_Transmit+0x3e>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e06e      	b.n	8002eee <HAL_UART_Transmit+0x11c>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2221      	movs	r2, #33	; 0x21
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e26:	f7fe ffd5 	bl	8001dd4 <HAL_GetTick>
 8002e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	88fa      	ldrh	r2, [r7, #6]
 8002e30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	88fa      	ldrh	r2, [r7, #6]
 8002e36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e40:	d108      	bne.n	8002e54 <HAL_UART_Transmit+0x82>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d104      	bne.n	8002e54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	e003      	b.n	8002e5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e64:	e02a      	b.n	8002ebc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2180      	movs	r1, #128	; 0x80
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f874 	bl	8002f5e <UART_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e036      	b.n	8002eee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	3302      	adds	r3, #2
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	e007      	b.n	8002eae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1cf      	bne.n	8002e66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2140      	movs	r1, #64	; 0x40
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f844 	bl	8002f5e <UART_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e006      	b.n	8002eee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e000      	b.n	8002eee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e020      	b.n	8002f52 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 030c 	bic.w	r3, r3, #12
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f043 0308 	orr.w	r3, r3, #8
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b090      	sub	sp, #64	; 0x40
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6e:	e050      	b.n	8003012 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d04c      	beq.n	8003012 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f7e:	f7fe ff29 	bl	8001dd4 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d241      	bcs.n	8003012 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	e853 3f00 	ldrex	r3, [r3]
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fae:	637a      	str	r2, [r7, #52]	; 0x34
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb6:	e841 2300 	strex	r3, r2, [r1]
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e5      	bne.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	e853 3f00 	ldrex	r3, [r3]
 8002fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3314      	adds	r3, #20
 8002fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe2:	623a      	str	r2, [r7, #32]
 8002fe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	69f9      	ldr	r1, [r7, #28]
 8002fe8:	6a3a      	ldr	r2, [r7, #32]
 8002fea:	e841 2300 	strex	r3, r2, [r1]
 8002fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e5      	bne.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e00f      	b.n	8003032 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	429a      	cmp	r2, r3
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	429a      	cmp	r2, r3
 800302e:	d09f      	beq.n	8002f70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3740      	adds	r7, #64	; 0x40
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800303c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003040:	b0c0      	sub	sp, #256	; 0x100
 8003042:	af00      	add	r7, sp, #0
 8003044:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003058:	68d9      	ldr	r1, [r3, #12]
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	ea40 0301 	orr.w	r3, r0, r1
 8003064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	431a      	orrs	r2, r3
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	431a      	orrs	r2, r3
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003094:	f021 010c 	bic.w	r1, r1, #12
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030a2:	430b      	orrs	r3, r1
 80030a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b6:	6999      	ldr	r1, [r3, #24]
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	ea40 0301 	orr.w	r3, r0, r1
 80030c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b8f      	ldr	r3, [pc, #572]	; (8003308 <UART_SetConfig+0x2cc>)
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d005      	beq.n	80030dc <UART_SetConfig+0xa0>
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b8d      	ldr	r3, [pc, #564]	; (800330c <UART_SetConfig+0x2d0>)
 80030d8:	429a      	cmp	r2, r3
 80030da:	d104      	bne.n	80030e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030dc:	f7ff fe10 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 80030e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030e4:	e003      	b.n	80030ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030e6:	f7ff fdf7 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 80030ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f8:	f040 810c 	bne.w	8003314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003100:	2200      	movs	r2, #0
 8003102:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003106:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800310a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800310e:	4622      	mov	r2, r4
 8003110:	462b      	mov	r3, r5
 8003112:	1891      	adds	r1, r2, r2
 8003114:	65b9      	str	r1, [r7, #88]	; 0x58
 8003116:	415b      	adcs	r3, r3
 8003118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800311a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800311e:	4621      	mov	r1, r4
 8003120:	eb12 0801 	adds.w	r8, r2, r1
 8003124:	4629      	mov	r1, r5
 8003126:	eb43 0901 	adc.w	r9, r3, r1
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800313a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800313e:	4690      	mov	r8, r2
 8003140:	4699      	mov	r9, r3
 8003142:	4623      	mov	r3, r4
 8003144:	eb18 0303 	adds.w	r3, r8, r3
 8003148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800314c:	462b      	mov	r3, r5
 800314e:	eb49 0303 	adc.w	r3, r9, r3
 8003152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003162:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800316a:	460b      	mov	r3, r1
 800316c:	18db      	adds	r3, r3, r3
 800316e:	653b      	str	r3, [r7, #80]	; 0x50
 8003170:	4613      	mov	r3, r2
 8003172:	eb42 0303 	adc.w	r3, r2, r3
 8003176:	657b      	str	r3, [r7, #84]	; 0x54
 8003178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800317c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003180:	f7fd fa68 	bl	8000654 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4b61      	ldr	r3, [pc, #388]	; (8003310 <UART_SetConfig+0x2d4>)
 800318a:	fba3 2302 	umull	r2, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	011c      	lsls	r4, r3, #4
 8003192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003196:	2200      	movs	r2, #0
 8003198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800319c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031a4:	4642      	mov	r2, r8
 80031a6:	464b      	mov	r3, r9
 80031a8:	1891      	adds	r1, r2, r2
 80031aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80031ac:	415b      	adcs	r3, r3
 80031ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031b4:	4641      	mov	r1, r8
 80031b6:	eb12 0a01 	adds.w	sl, r2, r1
 80031ba:	4649      	mov	r1, r9
 80031bc:	eb43 0b01 	adc.w	fp, r3, r1
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031d4:	4692      	mov	sl, r2
 80031d6:	469b      	mov	fp, r3
 80031d8:	4643      	mov	r3, r8
 80031da:	eb1a 0303 	adds.w	r3, sl, r3
 80031de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031e2:	464b      	mov	r3, r9
 80031e4:	eb4b 0303 	adc.w	r3, fp, r3
 80031e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003200:	460b      	mov	r3, r1
 8003202:	18db      	adds	r3, r3, r3
 8003204:	643b      	str	r3, [r7, #64]	; 0x40
 8003206:	4613      	mov	r3, r2
 8003208:	eb42 0303 	adc.w	r3, r2, r3
 800320c:	647b      	str	r3, [r7, #68]	; 0x44
 800320e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003216:	f7fd fa1d 	bl	8000654 <__aeabi_uldivmod>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4611      	mov	r1, r2
 8003220:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <UART_SetConfig+0x2d4>)
 8003222:	fba3 2301 	umull	r2, r3, r3, r1
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2264      	movs	r2, #100	; 0x64
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	1acb      	subs	r3, r1, r3
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003236:	4b36      	ldr	r3, [pc, #216]	; (8003310 <UART_SetConfig+0x2d4>)
 8003238:	fba3 2302 	umull	r2, r3, r3, r2
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003244:	441c      	add	r4, r3
 8003246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003250:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	1891      	adds	r1, r2, r2
 800325e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003260:	415b      	adcs	r3, r3
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003268:	4641      	mov	r1, r8
 800326a:	1851      	adds	r1, r2, r1
 800326c:	6339      	str	r1, [r7, #48]	; 0x30
 800326e:	4649      	mov	r1, r9
 8003270:	414b      	adcs	r3, r1
 8003272:	637b      	str	r3, [r7, #52]	; 0x34
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003280:	4659      	mov	r1, fp
 8003282:	00cb      	lsls	r3, r1, #3
 8003284:	4651      	mov	r1, sl
 8003286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800328a:	4651      	mov	r1, sl
 800328c:	00ca      	lsls	r2, r1, #3
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	4603      	mov	r3, r0
 8003294:	4642      	mov	r2, r8
 8003296:	189b      	adds	r3, r3, r2
 8003298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800329c:	464b      	mov	r3, r9
 800329e:	460a      	mov	r2, r1
 80032a0:	eb42 0303 	adc.w	r3, r2, r3
 80032a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032bc:	460b      	mov	r3, r1
 80032be:	18db      	adds	r3, r3, r3
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c2:	4613      	mov	r3, r2
 80032c4:	eb42 0303 	adc.w	r3, r2, r3
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032d2:	f7fd f9bf 	bl	8000654 <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <UART_SetConfig+0x2d4>)
 80032dc:	fba3 1302 	umull	r1, r3, r3, r2
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	2164      	movs	r1, #100	; 0x64
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	3332      	adds	r3, #50	; 0x32
 80032ee:	4a08      	ldr	r2, [pc, #32]	; (8003310 <UART_SetConfig+0x2d4>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	f003 0207 	and.w	r2, r3, #7
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4422      	add	r2, r4
 8003302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003304:	e106      	b.n	8003514 <UART_SetConfig+0x4d8>
 8003306:	bf00      	nop
 8003308:	40011000 	.word	0x40011000
 800330c:	40011400 	.word	0x40011400
 8003310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003318:	2200      	movs	r2, #0
 800331a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800331e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003326:	4642      	mov	r2, r8
 8003328:	464b      	mov	r3, r9
 800332a:	1891      	adds	r1, r2, r2
 800332c:	6239      	str	r1, [r7, #32]
 800332e:	415b      	adcs	r3, r3
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 8003332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003336:	4641      	mov	r1, r8
 8003338:	1854      	adds	r4, r2, r1
 800333a:	4649      	mov	r1, r9
 800333c:	eb43 0501 	adc.w	r5, r3, r1
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	00eb      	lsls	r3, r5, #3
 800334a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800334e:	00e2      	lsls	r2, r4, #3
 8003350:	4614      	mov	r4, r2
 8003352:	461d      	mov	r5, r3
 8003354:	4643      	mov	r3, r8
 8003356:	18e3      	adds	r3, r4, r3
 8003358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800335c:	464b      	mov	r3, r9
 800335e:	eb45 0303 	adc.w	r3, r5, r3
 8003362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003372:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003382:	4629      	mov	r1, r5
 8003384:	008b      	lsls	r3, r1, #2
 8003386:	4621      	mov	r1, r4
 8003388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800338c:	4621      	mov	r1, r4
 800338e:	008a      	lsls	r2, r1, #2
 8003390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003394:	f7fd f95e 	bl	8000654 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4b60      	ldr	r3, [pc, #384]	; (8003520 <UART_SetConfig+0x4e4>)
 800339e:	fba3 2302 	umull	r2, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	011c      	lsls	r4, r3, #4
 80033a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033b8:	4642      	mov	r2, r8
 80033ba:	464b      	mov	r3, r9
 80033bc:	1891      	adds	r1, r2, r2
 80033be:	61b9      	str	r1, [r7, #24]
 80033c0:	415b      	adcs	r3, r3
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c8:	4641      	mov	r1, r8
 80033ca:	1851      	adds	r1, r2, r1
 80033cc:	6139      	str	r1, [r7, #16]
 80033ce:	4649      	mov	r1, r9
 80033d0:	414b      	adcs	r3, r1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033e0:	4659      	mov	r1, fp
 80033e2:	00cb      	lsls	r3, r1, #3
 80033e4:	4651      	mov	r1, sl
 80033e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ea:	4651      	mov	r1, sl
 80033ec:	00ca      	lsls	r2, r1, #3
 80033ee:	4610      	mov	r0, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	4642      	mov	r2, r8
 80033f6:	189b      	adds	r3, r3, r2
 80033f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033fc:	464b      	mov	r3, r9
 80033fe:	460a      	mov	r2, r1
 8003400:	eb42 0303 	adc.w	r3, r2, r3
 8003404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	67bb      	str	r3, [r7, #120]	; 0x78
 8003412:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003420:	4649      	mov	r1, r9
 8003422:	008b      	lsls	r3, r1, #2
 8003424:	4641      	mov	r1, r8
 8003426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800342a:	4641      	mov	r1, r8
 800342c:	008a      	lsls	r2, r1, #2
 800342e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003432:	f7fd f90f 	bl	8000654 <__aeabi_uldivmod>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4611      	mov	r1, r2
 800343c:	4b38      	ldr	r3, [pc, #224]	; (8003520 <UART_SetConfig+0x4e4>)
 800343e:	fba3 2301 	umull	r2, r3, r3, r1
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2264      	movs	r2, #100	; 0x64
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	1acb      	subs	r3, r1, r3
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	3332      	adds	r3, #50	; 0x32
 8003450:	4a33      	ldr	r2, [pc, #204]	; (8003520 <UART_SetConfig+0x4e4>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800345c:	441c      	add	r4, r3
 800345e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003462:	2200      	movs	r2, #0
 8003464:	673b      	str	r3, [r7, #112]	; 0x70
 8003466:	677a      	str	r2, [r7, #116]	; 0x74
 8003468:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
 8003470:	1891      	adds	r1, r2, r2
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	415b      	adcs	r3, r3
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800347c:	4641      	mov	r1, r8
 800347e:	1851      	adds	r1, r2, r1
 8003480:	6039      	str	r1, [r7, #0]
 8003482:	4649      	mov	r1, r9
 8003484:	414b      	adcs	r3, r1
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003494:	4659      	mov	r1, fp
 8003496:	00cb      	lsls	r3, r1, #3
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349e:	4651      	mov	r1, sl
 80034a0:	00ca      	lsls	r2, r1, #3
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	4642      	mov	r2, r8
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80034ae:	464b      	mov	r3, r9
 80034b0:	460a      	mov	r2, r1
 80034b2:	eb42 0303 	adc.w	r3, r2, r3
 80034b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	663b      	str	r3, [r7, #96]	; 0x60
 80034c2:	667a      	str	r2, [r7, #100]	; 0x64
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034d0:	4649      	mov	r1, r9
 80034d2:	008b      	lsls	r3, r1, #2
 80034d4:	4641      	mov	r1, r8
 80034d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034da:	4641      	mov	r1, r8
 80034dc:	008a      	lsls	r2, r1, #2
 80034de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034e2:	f7fd f8b7 	bl	8000654 <__aeabi_uldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <UART_SetConfig+0x4e4>)
 80034ec:	fba3 1302 	umull	r1, r3, r3, r2
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	2164      	movs	r1, #100	; 0x64
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	3332      	adds	r3, #50	; 0x32
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <UART_SetConfig+0x4e4>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4422      	add	r2, r4
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	bf00      	nop
 8003516:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800351a:	46bd      	mov	sp, r7
 800351c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003520:	51eb851f 	.word	0x51eb851f

08003524 <_ZdlPvj>:
 8003524:	f000 b817 	b.w	8003556 <_ZdlPv>

08003528 <_Znwj>:
 8003528:	2801      	cmp	r0, #1
 800352a:	bf38      	it	cc
 800352c:	2001      	movcc	r0, #1
 800352e:	b510      	push	{r4, lr}
 8003530:	4604      	mov	r4, r0
 8003532:	4620      	mov	r0, r4
 8003534:	f000 f822 	bl	800357c <malloc>
 8003538:	b100      	cbz	r0, 800353c <_Znwj+0x14>
 800353a:	bd10      	pop	{r4, pc}
 800353c:	f000 f80e 	bl	800355c <_ZSt15get_new_handlerv>
 8003540:	b908      	cbnz	r0, 8003546 <_Znwj+0x1e>
 8003542:	f000 f813 	bl	800356c <abort>
 8003546:	4780      	blx	r0
 8003548:	e7f3      	b.n	8003532 <_Znwj+0xa>

0800354a <_ZSt17__throw_bad_allocv>:
 800354a:	b508      	push	{r3, lr}
 800354c:	f000 f80e 	bl	800356c <abort>

08003550 <_ZSt20__throw_length_errorPKc>:
 8003550:	b508      	push	{r3, lr}
 8003552:	f000 f80b 	bl	800356c <abort>

08003556 <_ZdlPv>:
 8003556:	f000 b819 	b.w	800358c <free>
	...

0800355c <_ZSt15get_new_handlerv>:
 800355c:	4b02      	ldr	r3, [pc, #8]	; (8003568 <_ZSt15get_new_handlerv+0xc>)
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	f3bf 8f5b 	dmb	ish
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	200000c4 	.word	0x200000c4

0800356c <abort>:
 800356c:	b508      	push	{r3, lr}
 800356e:	2006      	movs	r0, #6
 8003570:	f000 f90a 	bl	8003788 <raise>
 8003574:	2001      	movs	r0, #1
 8003576:	f7fe fb4b 	bl	8001c10 <_exit>
	...

0800357c <malloc>:
 800357c:	4b02      	ldr	r3, [pc, #8]	; (8003588 <malloc+0xc>)
 800357e:	4601      	mov	r1, r0
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	f000 b82b 	b.w	80035dc <_malloc_r>
 8003586:	bf00      	nop
 8003588:	20000058 	.word	0x20000058

0800358c <free>:
 800358c:	4b02      	ldr	r3, [pc, #8]	; (8003598 <free+0xc>)
 800358e:	4601      	mov	r1, r0
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	f000 b951 	b.w	8003838 <_free_r>
 8003596:	bf00      	nop
 8003598:	20000058 	.word	0x20000058

0800359c <sbrk_aligned>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	4e0e      	ldr	r6, [pc, #56]	; (80035d8 <sbrk_aligned+0x3c>)
 80035a0:	460c      	mov	r4, r1
 80035a2:	6831      	ldr	r1, [r6, #0]
 80035a4:	4605      	mov	r5, r0
 80035a6:	b911      	cbnz	r1, 80035ae <sbrk_aligned+0x12>
 80035a8:	f000 f90a 	bl	80037c0 <_sbrk_r>
 80035ac:	6030      	str	r0, [r6, #0]
 80035ae:	4621      	mov	r1, r4
 80035b0:	4628      	mov	r0, r5
 80035b2:	f000 f905 	bl	80037c0 <_sbrk_r>
 80035b6:	1c43      	adds	r3, r0, #1
 80035b8:	d00a      	beq.n	80035d0 <sbrk_aligned+0x34>
 80035ba:	1cc4      	adds	r4, r0, #3
 80035bc:	f024 0403 	bic.w	r4, r4, #3
 80035c0:	42a0      	cmp	r0, r4
 80035c2:	d007      	beq.n	80035d4 <sbrk_aligned+0x38>
 80035c4:	1a21      	subs	r1, r4, r0
 80035c6:	4628      	mov	r0, r5
 80035c8:	f000 f8fa 	bl	80037c0 <_sbrk_r>
 80035cc:	3001      	adds	r0, #1
 80035ce:	d101      	bne.n	80035d4 <sbrk_aligned+0x38>
 80035d0:	f04f 34ff 	mov.w	r4, #4294967295
 80035d4:	4620      	mov	r0, r4
 80035d6:	bd70      	pop	{r4, r5, r6, pc}
 80035d8:	200000cc 	.word	0x200000cc

080035dc <_malloc_r>:
 80035dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035e0:	1ccd      	adds	r5, r1, #3
 80035e2:	f025 0503 	bic.w	r5, r5, #3
 80035e6:	3508      	adds	r5, #8
 80035e8:	2d0c      	cmp	r5, #12
 80035ea:	bf38      	it	cc
 80035ec:	250c      	movcc	r5, #12
 80035ee:	2d00      	cmp	r5, #0
 80035f0:	4607      	mov	r7, r0
 80035f2:	db01      	blt.n	80035f8 <_malloc_r+0x1c>
 80035f4:	42a9      	cmp	r1, r5
 80035f6:	d905      	bls.n	8003604 <_malloc_r+0x28>
 80035f8:	230c      	movs	r3, #12
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	2600      	movs	r6, #0
 80035fe:	4630      	mov	r0, r6
 8003600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003604:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80036d8 <_malloc_r+0xfc>
 8003608:	f000 f868 	bl	80036dc <__malloc_lock>
 800360c:	f8d8 3000 	ldr.w	r3, [r8]
 8003610:	461c      	mov	r4, r3
 8003612:	bb5c      	cbnz	r4, 800366c <_malloc_r+0x90>
 8003614:	4629      	mov	r1, r5
 8003616:	4638      	mov	r0, r7
 8003618:	f7ff ffc0 	bl	800359c <sbrk_aligned>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	4604      	mov	r4, r0
 8003620:	d155      	bne.n	80036ce <_malloc_r+0xf2>
 8003622:	f8d8 4000 	ldr.w	r4, [r8]
 8003626:	4626      	mov	r6, r4
 8003628:	2e00      	cmp	r6, #0
 800362a:	d145      	bne.n	80036b8 <_malloc_r+0xdc>
 800362c:	2c00      	cmp	r4, #0
 800362e:	d048      	beq.n	80036c2 <_malloc_r+0xe6>
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	4631      	mov	r1, r6
 8003634:	4638      	mov	r0, r7
 8003636:	eb04 0903 	add.w	r9, r4, r3
 800363a:	f000 f8c1 	bl	80037c0 <_sbrk_r>
 800363e:	4581      	cmp	r9, r0
 8003640:	d13f      	bne.n	80036c2 <_malloc_r+0xe6>
 8003642:	6821      	ldr	r1, [r4, #0]
 8003644:	1a6d      	subs	r5, r5, r1
 8003646:	4629      	mov	r1, r5
 8003648:	4638      	mov	r0, r7
 800364a:	f7ff ffa7 	bl	800359c <sbrk_aligned>
 800364e:	3001      	adds	r0, #1
 8003650:	d037      	beq.n	80036c2 <_malloc_r+0xe6>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	442b      	add	r3, r5
 8003656:	6023      	str	r3, [r4, #0]
 8003658:	f8d8 3000 	ldr.w	r3, [r8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d038      	beq.n	80036d2 <_malloc_r+0xf6>
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	42a2      	cmp	r2, r4
 8003664:	d12b      	bne.n	80036be <_malloc_r+0xe2>
 8003666:	2200      	movs	r2, #0
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	e00f      	b.n	800368c <_malloc_r+0xb0>
 800366c:	6822      	ldr	r2, [r4, #0]
 800366e:	1b52      	subs	r2, r2, r5
 8003670:	d41f      	bmi.n	80036b2 <_malloc_r+0xd6>
 8003672:	2a0b      	cmp	r2, #11
 8003674:	d917      	bls.n	80036a6 <_malloc_r+0xca>
 8003676:	1961      	adds	r1, r4, r5
 8003678:	42a3      	cmp	r3, r4
 800367a:	6025      	str	r5, [r4, #0]
 800367c:	bf18      	it	ne
 800367e:	6059      	strne	r1, [r3, #4]
 8003680:	6863      	ldr	r3, [r4, #4]
 8003682:	bf08      	it	eq
 8003684:	f8c8 1000 	streq.w	r1, [r8]
 8003688:	5162      	str	r2, [r4, r5]
 800368a:	604b      	str	r3, [r1, #4]
 800368c:	4638      	mov	r0, r7
 800368e:	f104 060b 	add.w	r6, r4, #11
 8003692:	f000 f829 	bl	80036e8 <__malloc_unlock>
 8003696:	f026 0607 	bic.w	r6, r6, #7
 800369a:	1d23      	adds	r3, r4, #4
 800369c:	1af2      	subs	r2, r6, r3
 800369e:	d0ae      	beq.n	80035fe <_malloc_r+0x22>
 80036a0:	1b9b      	subs	r3, r3, r6
 80036a2:	50a3      	str	r3, [r4, r2]
 80036a4:	e7ab      	b.n	80035fe <_malloc_r+0x22>
 80036a6:	42a3      	cmp	r3, r4
 80036a8:	6862      	ldr	r2, [r4, #4]
 80036aa:	d1dd      	bne.n	8003668 <_malloc_r+0x8c>
 80036ac:	f8c8 2000 	str.w	r2, [r8]
 80036b0:	e7ec      	b.n	800368c <_malloc_r+0xb0>
 80036b2:	4623      	mov	r3, r4
 80036b4:	6864      	ldr	r4, [r4, #4]
 80036b6:	e7ac      	b.n	8003612 <_malloc_r+0x36>
 80036b8:	4634      	mov	r4, r6
 80036ba:	6876      	ldr	r6, [r6, #4]
 80036bc:	e7b4      	b.n	8003628 <_malloc_r+0x4c>
 80036be:	4613      	mov	r3, r2
 80036c0:	e7cc      	b.n	800365c <_malloc_r+0x80>
 80036c2:	230c      	movs	r3, #12
 80036c4:	603b      	str	r3, [r7, #0]
 80036c6:	4638      	mov	r0, r7
 80036c8:	f000 f80e 	bl	80036e8 <__malloc_unlock>
 80036cc:	e797      	b.n	80035fe <_malloc_r+0x22>
 80036ce:	6025      	str	r5, [r4, #0]
 80036d0:	e7dc      	b.n	800368c <_malloc_r+0xb0>
 80036d2:	605b      	str	r3, [r3, #4]
 80036d4:	deff      	udf	#255	; 0xff
 80036d6:	bf00      	nop
 80036d8:	200000c8 	.word	0x200000c8

080036dc <__malloc_lock>:
 80036dc:	4801      	ldr	r0, [pc, #4]	; (80036e4 <__malloc_lock+0x8>)
 80036de:	f000 b8a9 	b.w	8003834 <__retarget_lock_acquire_recursive>
 80036e2:	bf00      	nop
 80036e4:	2000020c 	.word	0x2000020c

080036e8 <__malloc_unlock>:
 80036e8:	4801      	ldr	r0, [pc, #4]	; (80036f0 <__malloc_unlock+0x8>)
 80036ea:	f000 b8a4 	b.w	8003836 <__retarget_lock_release_recursive>
 80036ee:	bf00      	nop
 80036f0:	2000020c 	.word	0x2000020c

080036f4 <memmove>:
 80036f4:	4288      	cmp	r0, r1
 80036f6:	b510      	push	{r4, lr}
 80036f8:	eb01 0402 	add.w	r4, r1, r2
 80036fc:	d902      	bls.n	8003704 <memmove+0x10>
 80036fe:	4284      	cmp	r4, r0
 8003700:	4623      	mov	r3, r4
 8003702:	d807      	bhi.n	8003714 <memmove+0x20>
 8003704:	1e43      	subs	r3, r0, #1
 8003706:	42a1      	cmp	r1, r4
 8003708:	d008      	beq.n	800371c <memmove+0x28>
 800370a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800370e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003712:	e7f8      	b.n	8003706 <memmove+0x12>
 8003714:	4402      	add	r2, r0
 8003716:	4601      	mov	r1, r0
 8003718:	428a      	cmp	r2, r1
 800371a:	d100      	bne.n	800371e <memmove+0x2a>
 800371c:	bd10      	pop	{r4, pc}
 800371e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003726:	e7f7      	b.n	8003718 <memmove+0x24>

08003728 <memset>:
 8003728:	4402      	add	r2, r0
 800372a:	4603      	mov	r3, r0
 800372c:	4293      	cmp	r3, r2
 800372e:	d100      	bne.n	8003732 <memset+0xa>
 8003730:	4770      	bx	lr
 8003732:	f803 1b01 	strb.w	r1, [r3], #1
 8003736:	e7f9      	b.n	800372c <memset+0x4>

08003738 <_raise_r>:
 8003738:	291f      	cmp	r1, #31
 800373a:	b538      	push	{r3, r4, r5, lr}
 800373c:	4604      	mov	r4, r0
 800373e:	460d      	mov	r5, r1
 8003740:	d904      	bls.n	800374c <_raise_r+0x14>
 8003742:	2316      	movs	r3, #22
 8003744:	6003      	str	r3, [r0, #0]
 8003746:	f04f 30ff 	mov.w	r0, #4294967295
 800374a:	bd38      	pop	{r3, r4, r5, pc}
 800374c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800374e:	b112      	cbz	r2, 8003756 <_raise_r+0x1e>
 8003750:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003754:	b94b      	cbnz	r3, 800376a <_raise_r+0x32>
 8003756:	4620      	mov	r0, r4
 8003758:	f000 f830 	bl	80037bc <_getpid_r>
 800375c:	462a      	mov	r2, r5
 800375e:	4601      	mov	r1, r0
 8003760:	4620      	mov	r0, r4
 8003762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003766:	f000 b817 	b.w	8003798 <_kill_r>
 800376a:	2b01      	cmp	r3, #1
 800376c:	d00a      	beq.n	8003784 <_raise_r+0x4c>
 800376e:	1c59      	adds	r1, r3, #1
 8003770:	d103      	bne.n	800377a <_raise_r+0x42>
 8003772:	2316      	movs	r3, #22
 8003774:	6003      	str	r3, [r0, #0]
 8003776:	2001      	movs	r0, #1
 8003778:	e7e7      	b.n	800374a <_raise_r+0x12>
 800377a:	2400      	movs	r4, #0
 800377c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003780:	4628      	mov	r0, r5
 8003782:	4798      	blx	r3
 8003784:	2000      	movs	r0, #0
 8003786:	e7e0      	b.n	800374a <_raise_r+0x12>

08003788 <raise>:
 8003788:	4b02      	ldr	r3, [pc, #8]	; (8003794 <raise+0xc>)
 800378a:	4601      	mov	r1, r0
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	f7ff bfd3 	b.w	8003738 <_raise_r>
 8003792:	bf00      	nop
 8003794:	20000058 	.word	0x20000058

08003798 <_kill_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4d07      	ldr	r5, [pc, #28]	; (80037b8 <_kill_r+0x20>)
 800379c:	2300      	movs	r3, #0
 800379e:	4604      	mov	r4, r0
 80037a0:	4608      	mov	r0, r1
 80037a2:	4611      	mov	r1, r2
 80037a4:	602b      	str	r3, [r5, #0]
 80037a6:	f7fe fa23 	bl	8001bf0 <_kill>
 80037aa:	1c43      	adds	r3, r0, #1
 80037ac:	d102      	bne.n	80037b4 <_kill_r+0x1c>
 80037ae:	682b      	ldr	r3, [r5, #0]
 80037b0:	b103      	cbz	r3, 80037b4 <_kill_r+0x1c>
 80037b2:	6023      	str	r3, [r4, #0]
 80037b4:	bd38      	pop	{r3, r4, r5, pc}
 80037b6:	bf00      	nop
 80037b8:	20000208 	.word	0x20000208

080037bc <_getpid_r>:
 80037bc:	f7fe ba10 	b.w	8001be0 <_getpid>

080037c0 <_sbrk_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4d06      	ldr	r5, [pc, #24]	; (80037dc <_sbrk_r+0x1c>)
 80037c4:	2300      	movs	r3, #0
 80037c6:	4604      	mov	r4, r0
 80037c8:	4608      	mov	r0, r1
 80037ca:	602b      	str	r3, [r5, #0]
 80037cc:	f7fe fa2a 	bl	8001c24 <_sbrk>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d102      	bne.n	80037da <_sbrk_r+0x1a>
 80037d4:	682b      	ldr	r3, [r5, #0]
 80037d6:	b103      	cbz	r3, 80037da <_sbrk_r+0x1a>
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	bd38      	pop	{r3, r4, r5, pc}
 80037dc:	20000208 	.word	0x20000208

080037e0 <__errno>:
 80037e0:	4b01      	ldr	r3, [pc, #4]	; (80037e8 <__errno+0x8>)
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000058 	.word	0x20000058

080037ec <__libc_init_array>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	4d0d      	ldr	r5, [pc, #52]	; (8003824 <__libc_init_array+0x38>)
 80037f0:	4c0d      	ldr	r4, [pc, #52]	; (8003828 <__libc_init_array+0x3c>)
 80037f2:	1b64      	subs	r4, r4, r5
 80037f4:	10a4      	asrs	r4, r4, #2
 80037f6:	2600      	movs	r6, #0
 80037f8:	42a6      	cmp	r6, r4
 80037fa:	d109      	bne.n	8003810 <__libc_init_array+0x24>
 80037fc:	4d0b      	ldr	r5, [pc, #44]	; (800382c <__libc_init_array+0x40>)
 80037fe:	4c0c      	ldr	r4, [pc, #48]	; (8003830 <__libc_init_array+0x44>)
 8003800:	f000 f866 	bl	80038d0 <_init>
 8003804:	1b64      	subs	r4, r4, r5
 8003806:	10a4      	asrs	r4, r4, #2
 8003808:	2600      	movs	r6, #0
 800380a:	42a6      	cmp	r6, r4
 800380c:	d105      	bne.n	800381a <__libc_init_array+0x2e>
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	f855 3b04 	ldr.w	r3, [r5], #4
 8003814:	4798      	blx	r3
 8003816:	3601      	adds	r6, #1
 8003818:	e7ee      	b.n	80037f8 <__libc_init_array+0xc>
 800381a:	f855 3b04 	ldr.w	r3, [r5], #4
 800381e:	4798      	blx	r3
 8003820:	3601      	adds	r6, #1
 8003822:	e7f2      	b.n	800380a <__libc_init_array+0x1e>
 8003824:	08003934 	.word	0x08003934
 8003828:	08003934 	.word	0x08003934
 800382c:	08003934 	.word	0x08003934
 8003830:	08003938 	.word	0x08003938

08003834 <__retarget_lock_acquire_recursive>:
 8003834:	4770      	bx	lr

08003836 <__retarget_lock_release_recursive>:
 8003836:	4770      	bx	lr

08003838 <_free_r>:
 8003838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800383a:	2900      	cmp	r1, #0
 800383c:	d044      	beq.n	80038c8 <_free_r+0x90>
 800383e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003842:	9001      	str	r0, [sp, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f1a1 0404 	sub.w	r4, r1, #4
 800384a:	bfb8      	it	lt
 800384c:	18e4      	addlt	r4, r4, r3
 800384e:	f7ff ff45 	bl	80036dc <__malloc_lock>
 8003852:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <_free_r+0x94>)
 8003854:	9801      	ldr	r0, [sp, #4]
 8003856:	6813      	ldr	r3, [r2, #0]
 8003858:	b933      	cbnz	r3, 8003868 <_free_r+0x30>
 800385a:	6063      	str	r3, [r4, #4]
 800385c:	6014      	str	r4, [r2, #0]
 800385e:	b003      	add	sp, #12
 8003860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003864:	f7ff bf40 	b.w	80036e8 <__malloc_unlock>
 8003868:	42a3      	cmp	r3, r4
 800386a:	d908      	bls.n	800387e <_free_r+0x46>
 800386c:	6825      	ldr	r5, [r4, #0]
 800386e:	1961      	adds	r1, r4, r5
 8003870:	428b      	cmp	r3, r1
 8003872:	bf01      	itttt	eq
 8003874:	6819      	ldreq	r1, [r3, #0]
 8003876:	685b      	ldreq	r3, [r3, #4]
 8003878:	1949      	addeq	r1, r1, r5
 800387a:	6021      	streq	r1, [r4, #0]
 800387c:	e7ed      	b.n	800385a <_free_r+0x22>
 800387e:	461a      	mov	r2, r3
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	b10b      	cbz	r3, 8003888 <_free_r+0x50>
 8003884:	42a3      	cmp	r3, r4
 8003886:	d9fa      	bls.n	800387e <_free_r+0x46>
 8003888:	6811      	ldr	r1, [r2, #0]
 800388a:	1855      	adds	r5, r2, r1
 800388c:	42a5      	cmp	r5, r4
 800388e:	d10b      	bne.n	80038a8 <_free_r+0x70>
 8003890:	6824      	ldr	r4, [r4, #0]
 8003892:	4421      	add	r1, r4
 8003894:	1854      	adds	r4, r2, r1
 8003896:	42a3      	cmp	r3, r4
 8003898:	6011      	str	r1, [r2, #0]
 800389a:	d1e0      	bne.n	800385e <_free_r+0x26>
 800389c:	681c      	ldr	r4, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	6053      	str	r3, [r2, #4]
 80038a2:	440c      	add	r4, r1
 80038a4:	6014      	str	r4, [r2, #0]
 80038a6:	e7da      	b.n	800385e <_free_r+0x26>
 80038a8:	d902      	bls.n	80038b0 <_free_r+0x78>
 80038aa:	230c      	movs	r3, #12
 80038ac:	6003      	str	r3, [r0, #0]
 80038ae:	e7d6      	b.n	800385e <_free_r+0x26>
 80038b0:	6825      	ldr	r5, [r4, #0]
 80038b2:	1961      	adds	r1, r4, r5
 80038b4:	428b      	cmp	r3, r1
 80038b6:	bf04      	itt	eq
 80038b8:	6819      	ldreq	r1, [r3, #0]
 80038ba:	685b      	ldreq	r3, [r3, #4]
 80038bc:	6063      	str	r3, [r4, #4]
 80038be:	bf04      	itt	eq
 80038c0:	1949      	addeq	r1, r1, r5
 80038c2:	6021      	streq	r1, [r4, #0]
 80038c4:	6054      	str	r4, [r2, #4]
 80038c6:	e7ca      	b.n	800385e <_free_r+0x26>
 80038c8:	b003      	add	sp, #12
 80038ca:	bd30      	pop	{r4, r5, pc}
 80038cc:	200000c8 	.word	0x200000c8

080038d0 <_init>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	bf00      	nop
 80038d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d6:	bc08      	pop	{r3}
 80038d8:	469e      	mov	lr, r3
 80038da:	4770      	bx	lr

080038dc <_fini>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	bf00      	nop
 80038e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e2:	bc08      	pop	{r3}
 80038e4:	469e      	mov	lr, r3
 80038e6:	4770      	bx	lr
